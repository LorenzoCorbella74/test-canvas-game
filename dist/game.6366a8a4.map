{"version":3,"sources":["src/brain.ts","src/helper.ts","src/entities/weapons.ts","src/entities/enemies.ts","src/entities/powerup.ts","src/controller.ts","src/entities/player.ts","src/config.ts","src/camera.ts","src/maps/dm1.ts","src/maps.ts","src/entities/bullet.ts","src/entities/particelle.ts","src/entities/blood.ts","src/entities/waypoints.ts","node_modules/easystarjs/src/instance.js","node_modules/easystarjs/src/node.js","node_modules/heap/lib/heap.js","node_modules/heap/index.js","node_modules/easystarjs/src/easystar.js","src/game.ts"],"names":[],"mappings":"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AAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC9M,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC/M,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7M,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC9M,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAA,EAAE,EAAE,EAAE,EAAE,EAAE,GAC5M,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAA,EAAE,EAAE,EAAE,EAAE,EAAE,GAC7M,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC9M,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC/M,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC9M,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EA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","file":"game.6366a8a4.map","sourceRoot":"..","sourcesContent":["export class BrainFSM {\r\n\r\n    private stack: any[] = [];\r\n    private time: number;\r\n    private justSetState: boolean;\r\n    private state: string;\r\n    private first: boolean;\r\n    private _currentStateFunction: Function;\r\n\r\n    get currentStateFunction() {\r\n        return this.getCurrentState();\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    public update(who: any, dt: number): void {\r\n        if (this.currentStateFunction != null) {\r\n            this.first = this.justSetState;\r\n            this.time += this.first ? 0 : dt;\r\n            this.justSetState = false;\r\n            this.currentStateFunction(who, dt);\r\n        }\r\n    }\r\n    \r\n    public popState(): Function {\r\n        return this.stack.pop();\r\n    }\r\n    \r\n    public pushState(state: Function): void {\r\n        if (this.getCurrentState() != state) {\r\n            this.state = state.constructor.name;\r\n            this.time = 0;\r\n            this.justSetState = true;\r\n            this.stack.push(state);\r\n        }\r\n    }\r\n\r\n    public getCurrentState(): Function {\r\n        return this.stack.length > 0 ? this.stack[this.stack.length - 1] : null;\r\n    }\r\n\r\n\r\n    is(state: any) {\r\n        return this._currentStateFunction === state;\r\n    }\r\n\r\n    isIn(...states: any) {\r\n        return states.some(s => this.is(s));\r\n    }\r\n}","export class Helper {\r\n\r\n    static spawnUsed: number = 0;\r\n    static botsNameIndex: number = 0;\r\n\r\n    static getSpawnPoint(arr: any[]) {\r\n        let _spawn = this.spawnUsed;\r\n        if (_spawn == arr.length) {\r\n            _spawn= 0;\r\n            this.spawnUsed = 0;\r\n        } else {\r\n            this.spawnUsed++;\r\n        }\r\n        console.log(`Used spawn point n° ${this.spawnUsed}`);\r\n        return arr[_spawn]\r\n    }\r\n\r\n    static getBotsName(arr: any[]) {\r\n        let _spawn = this.botsNameIndex;\r\n        if (_spawn == arr.length) {\r\n            _spawn= 0;\r\n            this.botsNameIndex = 0;\r\n        } else {\r\n            this.botsNameIndex++;\r\n        }\r\n        return arr[_spawn]\r\n    }\r\n\r\n    static calculateAngle(cx: number, cy: number, ex: number, ey: number) {\r\n        let dy = ey - cy;\r\n        let dx = ex - cx;\r\n        let theta = Math.atan2(dy, dx); // range (-PI, PI]\r\n        // theta *= 180 / Math.PI; // rads to degs, range (-180, 180]\r\n        // if (theta < 0) theta = 360 + theta; // range [0, 360)\r\n        //if (theta < 0) theta = Math.PI + theta; // range [0, 360)\r\n        return theta;\r\n    }\r\n\r\n    \r\n    static calculateDistance(obj1: any, obj2: any) {\r\n        let tx = obj1.x - obj2.x,\r\n        ty = obj1.y - obj2.y,\r\n        dist = Math.sqrt(tx * tx + ty * ty);\r\n        return dist;\r\n    }\r\n    \r\n    static randomElementInArray(items: any) {\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    }\r\n\r\n    // Returns a random integer between min (include) and max (include)\r\n    static randBetween(min:number, max:number){\r\n        return  Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    static rand(min, max) {\r\n        return Math.floor(Helper.randf(min, max));\r\n      }\r\n      \r\n    static randf(min, max) {\r\n    if (max == null) {\r\n        max = min || 1;\r\n        min = 0;\r\n    }\r\n    return Math.random() * (max - min) + min;\r\n    }\r\n      \r\n      static randOneIn(max = 2) {\r\n        return Helper.rand(0, max) === 0;\r\n      }\r\n\r\n    static circleCollision(circle1: any, circle2: any) {\r\n        let x = circle1.x - circle2.x;\r\n        let y = circle1.y - circle2.y\r\n        let distance = Math.sqrt(x * x + y * y);\r\n        return (distance < circle1.r + circle2.r) ? true : false;\r\n    }\r\n\r\n\r\n    // https://yal.cc/rectangle-circle-intersection-test/\r\n    // https://gist.github.com/vonWolfehaus/5023015\r\n    static circleRectangleCollision(circle:any, rectangle:any){\r\n        // limits value to the range min..max\r\n        function clamp(val:number, min:number, max:number) {\r\n            return Math.max(min, Math.min(max, val))\r\n        }\r\n\r\n        // Find the closest point to the circle within the rectangle\r\n        // Assumes axis alignment! ie rect must not be rotated\r\n        var closestX = clamp(circle.x, rectangle.x, rectangle.x + rectangle.width);\r\n        var closestY = clamp(circle.y, rectangle.y, rectangle.y + rectangle.height);\r\n\r\n        // Calculate the distance between the circle's center and this closest point\r\n        var distanceX = circle.x - closestX;\r\n        var distanceY = circle.y - closestY;\r\n\r\n        // If the distance is less than the circle's radius, an intersection occurs\r\n        var distanceSquared = (distanceX * distanceX) + (distanceY * distanceY);\r\n        return distanceSquared < (circle.r * circle.r);\r\n    }\r\n\r\n    // https://www.emanueleferonato.com/2007/04/28/create-a-flash-artillery-game-step-1/\r\n    // https://www.safaribooksonline.com/library/view/html5-canvas/9781449308032/ch05s03.html\r\n\r\n    static getBotsPreferences(): string {\r\n        let preferences = [/* 'Rifle',  */'Shotgun', 'Plasma', 'Rocket', 'Railgun'];\r\n        let weights = [0.22, 0.24, 0.27, 0.26];\r\n        function generateWeighedList(list:string[], weights:number[]) {\r\n            let weighed_list = [];\r\n            // Loop over weights\r\n            for (let i = 0; i < weights.length; i++) {\r\n                let multiples = weights[i] * 100;\r\n                // Loop over the list of items\r\n                for (let j = 0; j < multiples; j++) {\r\n                    weighed_list.push(list[i]);\r\n                }\r\n            }\r\n            return weighed_list;\r\n        };\r\n        let weighed_list = generateWeighedList(preferences, weights);\r\n        let random_num = Helper.rand(0, weighed_list.length-1);\r\n        return weighed_list[random_num];\r\n    }\r\n\r\n    // NEW Line drawing on a grid\r\n\r\n    static dot(x1:number, y1:number, x2:number, y2:number) {\r\n        return x1 * x2 + y1 * y2;\r\n    }\r\n\r\n    static lerp(start, end, t) {\r\n        return start + t * (end-start);\r\n    }\r\n\r\n    static lerp_point(p0, p1, t) {\r\n        return { x: Helper.lerp(p0.x, p1.x, t), y: Helper.lerp(p0.y, p1.y, t) };\r\n    }\r\n\r\n    static diagonal_distance(p0, p1) {\r\n        var dx = p1.x - p0.x, dy = p1.y - p0.y;\r\n        return Math.max(Math.abs(dx), Math.abs(dy));\r\n    }\r\n    \r\n    static round_point(p) {\r\n        return {x: Math.round(p.x), y: Math.round(p.y)};\r\n    }\r\n    \r\n    static line(p0, p1) {\r\n        var points = [];\r\n        var N = Helper.diagonal_distance(p0, p1);\r\n        for (var step = 0; step <= N; step++) {\r\n            var t = N == 0? 0.0 : step / N;\r\n            points.push(Helper.round_point(Helper.lerp_point(p0, p1, t)));\r\n        }\r\n        return points;\r\n    }\r\n\r\n}   ","export class WeaponsInventory {\r\n\r\n    weapon: number;\r\n    selectedWeapon: any;\r\n    weapons: any[] = [\r\n        {\r\n            name: 'Rifle',\r\n            frequency: 200,\r\n            count: 1,\r\n            speed: 9,\r\n            r: 2,\r\n            color: 'black',\r\n            ttl: 1000,\r\n            explode: 0,\r\n            spread: 0.1,\r\n            damage: 5,\r\n            // destroy: false,\r\n            available: true,\r\n            shotNumber: 100      // numero di colpi iniziale\r\n        }, {\r\n            name: 'Shotgun',\r\n            frequency: 800,     // // 200 è la frequenza di sparo = 5 colpi al sec\r\n            count: 6,           // NUMERO DI PARTICELLE PER OGNI COLPO\r\n            speed: 9,           // VELOCITA'\r\n            r: 2,\r\n            color: '#800000',\r\n            ttl: 1000,            // VITA (DURATA DEL COLPO)\r\n            explode: 0,         // SE CREA UNA ESPLOSIONE\r\n            spread: 0.5,        // QUANTO SI ALLARGA\r\n            damage: 10,          // DANNO INFLITTO\r\n            // destroy: false,     // SE DISTRUGGE\r\n            available: false,    // SE L'ARMA E' DISPONIBILE\r\n            shotNumber: 0 // 60      // numero di colpi\r\n        }, {\r\n            name: 'Flamer',\r\n            frequency: 25,\r\n            count: 1,\r\n            speed: 6,\r\n            r: 4,\r\n            color: '#FFA500',\r\n            ttl: 500,\r\n            explode: 0,\r\n            spread: 1.5,\r\n            damage: 1,\r\n            //destroy: false,\r\n            available: true,\r\n            shotNumber: Infinity\r\n        }, {\r\n            name: 'Plasma',\r\n            frequency: 150,\r\n            count: 1,\r\n            speed: 10,\r\n            r: 3,\r\n            color: 'blue',\r\n            ttl: 1400,\r\n            explode: 0,\r\n            spread: 0.01,\r\n            damage: 3,\r\n            // destroy: false,\r\n            available: false,\r\n            shotNumber: 0 // 80   \r\n        }, {\r\n            name: 'Rocket',\r\n            frequency: 1000,\r\n            count: 1,\r\n            speed: 8,\r\n            r: 4,\r\n            color: 'red',\r\n            ttl: 1500,\r\n            explode: 1,\r\n            spread: 0.01,\r\n            damage: 65,\r\n            //destroy: true,\r\n            available: false,\r\n            shotNumber: 0// 10      \r\n        }, {\r\n            name: 'Railgun',\r\n            frequency: 2000,\r\n            count: 1,\r\n            speed: 16,\r\n            r: 3,\r\n            color: 'green',\r\n            ttl: 1500,\r\n            explode: 0,\r\n            spread: 0.01,\r\n            damage: 110,\r\n            //destroy: false,\r\n            available: false,\r\n            shotNumber: 0 // 100\r\n        }];\r\n\r\n    constructor() {\r\n        this.weapon = 0;\r\n        this.selectedWeapon = this.weapons[this.weapon];\r\n    }\r\n\r\n    setWeapon(index: number) {\r\n        this.selectedWeapon = this.weapons[index];\r\n    }\r\n\r\n    // ora si prende l'arma + \"in alto\"\r\n    // TODO: si prende in base a probabilità pesata delle preferenze del bot e alla disponibilità\r\n    getBest() {\r\n        for (let i = this.weapons.length - 1; i >= 0; i--) {\r\n            let item = this.weapons[i];\r\n            if (item && item.available && item.shotNumber > 0) {\r\n                this.selectedWeapon = this.weapons[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // dopo un respawn le munizioni vengono azzerate \r\n    // e rimossa la disponibilità delle armi\r\n    resetWeapons() {\r\n        for (let i = this.weapons.length - 1; i >= 0; i--) {\r\n            let item = this.weapons[i];\r\n            item.shotNumber = 0;\r\n            item.available = false;\r\n        }\r\n        this.weapons[0].shotNumber = 100;\r\n        this.weapons[0].available = true;\r\n    }\r\n\r\n    // quando si colleziona un'arma e una cassa di munizioni\r\n    setAvailabilityAndNumOfBullets(name: string, numOfBullet: number) {\r\n        for (let i = this.weapons.length - 1; i >= 0; i--) {\r\n            let item = this.weapons[i];\r\n            if (item.name == name) {\r\n                item.shotNumber += numOfBullet;\r\n                item.available = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setNumOfBullets(name: string, numOfBullet: number) {\r\n        for (let i = this.weapons.length - 1; i >= 0; i--) {\r\n            let item = this.weapons[i];\r\n            if (item.name == name) {\r\n                item.shotNumber += numOfBullet;\r\n            }\r\n        }\r\n    }\r\n\r\n}","import { BrainFSM } from '../brain';\r\nimport { Helper } from '../helper'\r\nimport { WeaponsInventory } from './weapons';\r\n\r\n\r\nexport class Enemy {\r\n\r\n    // entities\r\n    canvas: any;\r\n    ctx:    any;\r\n    camera: any;\r\n    main:   any;\r\n    c:      any;\r\n    player: any;\r\n    map:    any\r\n    bullet: any;\r\n\r\n    list:   any;\r\n\r\n    constructor() { }\r\n\r\n    init(main: any) {\r\n        this.list = [];\r\n        this.main = main;\r\n        this.c = main.c;\r\n        this.player = main.player;\r\n        this.canvas = main.canvas;\r\n        this.camera = main.camera;\r\n        this.map = main.currentMap;\r\n        this.bullet = main.bullet;\r\n        this.ctx = main.ctx;\r\n    }\r\n\r\n    create(x: number, y: number, num: number, team:string) {\r\n        let bot: any = new Object();\r\n        bot.brain = new BrainFSM();\r\n        bot.index = num;\r\n        bot.name = Helper.getBotsName(this.c.ENEMY_NAMES);\r\n        bot.x = x || 75;\r\n        bot.y = y || 50;\r\n        bot.r = this.c.ENEMY_RADIUS;\r\n        bot.old_x = x;\r\n        bot.old_y = y;\r\n        bot.velX = 0;\r\n        bot.velY = 0;\r\n        bot.alive = true;\r\n        bot.speed = this.c.ENEMY_SPEED;\r\n        bot.angleWithTarget = 0;\r\n        bot.hp = this.c.ENEMY_HP;\r\n        bot.ap = this.c.ENEMY_AP;\r\n        bot.team = team;\r\n        // bot.preferences= Helper.getBotsPreferences();\r\n\r\n        bot.damage = 1;\t\t// è per il moltiplicatore del danno (quad = 4)\r\n        bot.kills = 0;\r\n        bot.numberOfDeaths = 0;\r\n        bot.target = {};\r\n        bot.aggression = Math.random() * 1 / 3 + 2 / 3;\r\n        bot.targetItem = {};\r\n        bot.trails = [];\r\n        this.list[this.list.length] = bot;\r\n        bot.brain.pushState(this.spawn.bind(this));\r\n\r\n        bot.weaponsInventory = new WeaponsInventory();\r\n        bot.currentWeapon = bot.weaponsInventory.selectedWeapon;\t\t// arma corrente\r\n        bot.attackCounter = 0;\r\n\r\n        bot.path = [];\r\n        return bot;\r\n    };\r\n\r\n    respawn(bot: any) {\r\n        const spawn = Helper.getSpawnPoint(this.main.data.spawn);\r\n        console.log(`BOT ${bot.index} is swawning at ${spawn.x} - ${spawn.y}`);\r\n        bot.x = spawn.x;\r\n        bot.y = spawn.y;\r\n        bot.old_x = spawn.x;\r\n        bot.old_y = spawn.y;\r\n        bot.r = this.c.ENEMY_RADIUS;\r\n        bot.velX = 0;\r\n        bot.velY = 0;\r\n        bot.speed = this.c.ENEMY_SPEED;\t// è uguale in tutte le direzioni\r\n        bot.damage = 1;\t\t\t\t\t// è il moltiplicatore del danno (quad = 4)\r\n        bot.angleWithTarget = 0;\t\t// angolo tra asse x e precedente target\r\n        bot.hp = this.c.PLAYER_HP;\t\t// punti vita\r\n        bot.ap = this.c.PLAYER_AP;\t\t// punti armatura\r\n        bot.alive = true;\t\t\t    // il bot è nuovamente presente in gioco\r\n        // this.kills = 0;\t\t\t\t// si mantengono...\r\n        // this.numberOfDeaths = 0;\t    // si mantengono...\r\n        bot.target = {};\r\n        bot.targetItem = {};\r\n        bot.trails = [];\r\n\r\n        \r\n        let amplitude = 100;\r\n        setTimeout(() => {\t\r\n            for (let i = 0; i < 100; i++) {\r\n                let beta = this.main.lastRender + i*20 + + Math.PI / 2;\r\n                let respawnParticles: any = {};\r\n                respawnParticles.x = bot.x  + Math.cos(beta) * Helper.randBetween(0,amplitude);\r\n                respawnParticles.y = bot.y  + Math.sin(beta) * Helper.randBetween(0,amplitude);\r\n                this.main.particelle.create(respawnParticles.x, respawnParticles.y , 0.5,0.5, 6, Helper.randomElementInArray(bot.team !='team1'? this.c.ENEMY_RESPAWN   :this.c.PLAYER_RESPAWN));\r\n            }\t\t\r\n    }, 150);\r\n\r\n        //  WEAPONS\r\n        bot.attackCounter = 0;\r\n        bot.weaponsInventory.resetWeapons();                    \t// munizioni e disponibilità default\r\n        bot.weaponsInventory.setWeapon(0);\t\t\t\t\t\t\t// arma default\r\n        bot.currentWeapon = bot.weaponsInventory.selectedWeapon;\t// arma corrente\r\n\r\n        bot.path = [];                                               // PATHFINDING\r\n\r\n        bot.brain.pushState(this.spawn.bind(this));                  // AI\r\n    }\r\n\r\n    private getBotColour(bot: any) {\r\n        if (bot.speed > 5/16) {\r\n            return 'yellow';\r\n        }\r\n        if (bot.damage > 1) {\r\n            return 'violet';\r\n        }\r\n        return bot.team !='team1'? this.c.ENEMY_COLOUR_INSIDE:this.c.PLAYER_COLOUR_INSIDE;\r\n    }\r\n\r\n    render() {\r\n        for (let i = this.list.length - 1; i >= 0; i--) {\r\n            const bot = this.list[i];\r\n            if (bot.alive) {\r\n\r\n                var pointerLength = this.c.ENEMY_RADIUS;\r\n                let intersX =bot.x - this.camera.x + pointerLength * Math.cos(bot.angleWithTarget);\r\n                let intersY =bot.y - this.camera.y + pointerLength * Math.sin(bot.angleWithTarget);\r\n                // trails\r\n                for (let i = 0; i < bot.trails.length; i++) {\r\n                    let ratio = (i + 1) / bot.trails.length;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(bot.trails[i].x - this.camera.x, bot.trails[i].y - this.camera.y, ratio * bot.r * (3 / 5) + bot.r * (2 / 5), 0, 2 * Math.PI, true);\r\n                    this.ctx.fillStyle = this.ctx.fillStyle = `rgb(127, 134, 135,${ratio / 2})`;\r\n                    this.ctx.fill();\r\n                }\r\n\r\n                // draw the WEAPON !!\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(intersX, intersY, 4, 0, 2 * Math.PI, true);\r\n                this.ctx.fillStyle = bot.currentWeapon.color;\r\n                this.ctx.fill();\r\n\r\n                // draw the colored region\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(bot.x - this.camera.x, bot.y - this.camera.y, bot.r, 0, 2 * Math.PI, true);\r\n                this.ctx.fillStyle = this.getBotColour(bot);\r\n                this.ctx.fill();\r\n\r\n                // draw the stroke\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.strokeStyle = bot.team !='team1'? this.c.ENEMY_COLOUR_OUTSIDE:this.c.PLAYER_COLOUR_OUTSIDE;\r\n                this.ctx.stroke();\r\n\r\n                // beccuccio arma\r\n                this.ctx.strokeStyle = bot.team !='team1'? this.c.ENEMY_COLOUR_OUTSIDE: this.c.PLAYER_COLOUR_OUTSIDE;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(bot.x - this.camera.x, bot.y - this.camera.y);\r\n                this.ctx.lineTo(intersX,intersY);\r\n                this.ctx.stroke();\r\n\r\n                if (this.main.debug) {\r\n                    this.ctx.font = 'bold 8px/1 Arial';\r\n                    this.ctx.fillStyle = 'white';\r\n                    this.ctx.fillText(bot.hp.toString(), bot.x - this.camera.x - 5, bot.y - this.camera.y);\r\n                    this.ctx.fillStyle = 'black';\r\n                    this.ctx.fillText(bot.index.toString(), bot.x - this.camera.x - 25, bot.y - this.camera.y - 16);\r\n                    this.ctx.fillText(bot.target && bot.target.index ? bot.target.index.toString() : '', bot.x - this.camera.x + 6, bot.y - this.camera.y + 20);\r\n                    this.ctx.fillText(bot.target && bot.target.dist ? bot.target.dist.toString() : '', bot.x - this.camera.x + 22, bot.y - this.camera.y + 36);\r\n                    this.ctx.fillText(bot && bot.aggression ? bot.aggression.toFixed(2).toString() : '', bot.x - this.camera.x + 22, bot.y - this.camera.y + 20);\r\n                    this.ctx.fillText(bot.targetItem && bot.targetItem.index ? bot.targetItem.index.toString() : '', bot.x - this.camera.x + 10, bot.y - this.camera.y - 20);\r\n                    this.ctx.fillText(bot.status, bot.x - this.camera.x - 25, bot.y - this.camera.y + 20);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getRandomDirection(bot: any) {\r\n        return Helper.randomElementInArray([bot.velX, -bot.velY, bot.velY, -bot.velX]);\r\n    }\r\n\r\n    isLavaOrToxic(bot: any, x: number, y: number): void {\r\n        let fy = Math.floor(y / this.c.TILE_SIZE);\r\n        let fx = Math.floor(x / this.c.TILE_SIZE);\r\n        let cy = Math.ceil(y / this.c.TILE_SIZE);\r\n        let cx = Math.ceil(x / this.c.TILE_SIZE);\r\n        if (/* fx || fy|| cy|| cx */\r\n             this.map.map[fy][fx] == 3\r\n            || this.map.map[fy][cx] == 3\r\n            || this.map.map[cy][fx] == 3\r\n            || this.map.map[cy][cx] == 3\r\n            || this.map.map[fy][fx] == 4\r\n            || this.map.map[fy][cx] == 4\r\n            || this.map.map[cy][fx] == 4\r\n            || this.map.map[cy][cx] == 4\r\n        ) {\r\n            bot.hp -= 0.5;\r\n            for (var j = 0; j < 24; j++) {\r\n                this.main.particelle.create(bot.x + Helper.randBetween(-bot.r, bot.r), bot.y + Helper.randBetween(-bot.r, bot.r), Math.random() * 2 - 2, Math.random() * 2 - 2, 2, Helper.randomElementInArray(this.c.FIRE_IN_LAVA))\r\n            }\r\n            if (bot.hp <= 0) {\r\n                bot.alive = false;\r\n                bot.numberOfDeaths++;\r\n                for (let b = 0; b < 36; b++) {\r\n                    this.main.blood.create(bot.x, bot.y, Math.random() * 2 - 2, Math.random() * 2 - 2, this.c.BLOOD_RADIUS) // crea il sangue\r\n                }\r\n                console.log(`Bot killed by lava.`);\r\n                setTimeout(() => {\r\n                    this.respawn(bot);\r\n                }, this.c.GAME_RESPAWN_TIME);\r\n            }\r\n        }\r\n    }\r\n\r\n    storePosForTrail(bot: any) {\r\n        // push an item\r\n        bot.trails.push({ x: bot.x, y: bot.y });\r\n        //get rid of first item\r\n        if (bot.trails.length > this.c.MOTION_TRAILS_LENGTH) {\r\n            bot.trails.shift();\r\n        }\r\n    }\r\n\r\n    checkCollision(bot: any) {\r\n        // collisione con i muri\r\n        if (bot.x - bot.old_x > 0 && this.main.currentMap.map[Math.floor(bot.y / this.c.TILE_SIZE)][Math.floor((bot.x + bot.r) / this.c.TILE_SIZE)] == 1) {\r\n            bot.x = bot.old_x;\r\n        }\r\n        if (bot.x - bot.old_x < 0 && this.main.currentMap.map[Math.floor(bot.y / this.c.TILE_SIZE)][Math.floor((bot.x - bot.r) / this.c.TILE_SIZE)] == 1) {\r\n            bot.x = bot.old_x;\r\n        }\r\n        if (bot.y - bot.old_y > 0 && this.main.currentMap.map[Math.floor((bot.y + bot.r) / this.c.TILE_SIZE)][Math.floor(bot.x / this.c.TILE_SIZE)] == 1) {\r\n            bot.y = bot.old_y;\r\n        }\r\n        if (bot.y - bot.old_y < 0 && this.main.currentMap.map[Math.floor((bot.y - bot.r) / this.c.TILE_SIZE)][Math.floor(bot.x / this.c.TILE_SIZE)] == 1) {\r\n            bot.y = bot.old_y;\r\n        }\r\n        // Collisione con il target\r\n        /* if (bot.target && Helper.circleCollision(bot, bot.target)) {\r\n            bot.y += bot.old_y;\r\n            bot.x += bot.old_x;\r\n        } */\r\n        this.storePosForTrail(bot)\r\n    }\r\n\r\n\r\n    // SOURCE: https://www.redblobgames.com/grids/line-drawing.html\r\n    checkIfIsSeen2(p0: any, p1: any) {\r\n        let points = Helper.line(p0,p1);\r\n        let output = true;\r\n        for (let i = 0; i < points.length; i += 3) {  // STEP DI 2 PER RIDURRE I CICLI...\r\n            const ele = points[i];\r\n            if (this.map.map[Math.floor(ele.y / this.c.TILE_SIZE)][Math.floor(ele.x / this.c.TILE_SIZE)] == 1) {\r\n                output = false;\r\n                break;\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------------------- */\r\n\r\n    update(dt: number, timestamp:number) {\r\n        for (let i = this.list.length - 1; i >= 0; i--) {\r\n            const bot = this.list[i];\r\n            if (bot.alive) {\r\n                bot.brain.update(bot, dt);\r\n                this.isLavaOrToxic(bot, bot.x, bot.y);\r\n                this.checkCollision(bot);\r\n            }\r\n        }\r\n    }\r\n\r\n    spawn(bot: any, dt: number) {\r\n        bot.status = 'spawn';\r\n        let opponentData = this.getNearestVisibleEnemy(bot, this.main.actors);\r\n        // const power_best = this.getNearestPowerup(bot, this.main.powerup.list);\r\n        // const waypoint_best = this.getNearestWaypoint(bot, this.main.waypoints.list);\r\n        // bot.targetItem = power_best || waypoint_best;\r\n        bot.target = opponentData.elem;\r\n        if (bot.target && bot.target.alive) {\r\n            if (bot.currentWeapon.shotNumber < 1) {\r\n                bot.weaponsInventory.getBest();\r\n                bot.currentWeapon = bot.weaponsInventory.selectedWeapon;\t// arma corrente\r\n            }\r\n            bot.brain.pushState(this.chaseTarget.bind(this));\r\n        } else if (bot.targetItem) {\r\n            bot.brain.pushState(this.wander.bind(this));\r\n        }\r\n    }\r\n\r\n    chaseTarget(bot: any, dt: number) {\r\n        bot.status = 'chasing';\r\n        bot.angleWithTarget = Helper.calculateAngle(bot.x, bot.y, bot.target.x, bot.target.y);\r\n\r\n        if (bot.target && bot.target.alive && this.checkIfIsSeen2(bot.target, bot)) {\r\n            var tx = bot.target.x - bot.x,\r\n                ty = bot.target.y - bot.y,\r\n                dist = Math.sqrt(tx * tx + ty * ty);\r\n            bot.old_x = bot.x;\r\n            bot.old_y = bot.y;\r\n\r\n            // da 350 a 225 ci si avvicina al target\r\n            if (dist > 250 /* && bot.aggression>0.55 || dist > 225 && bot.hp>40 */) {\r\n                bot.velX = (tx / dist);\r\n                bot.velY = (ty / dist);\r\n            }\r\n            if (dist > 100 && dist < 250) { // comportamento random\r\n                bot.velX = Math.random() < 0.95 ? bot.velX : this.getRandomDirection(bot);\r\n                bot.velY = Math.random() < 0.95 ? bot.velY : this.getRandomDirection(bot);\r\n            }\r\n            if (dist < 100 /* && bot.aggression < 0.95 */) { // retreat\r\n                bot.velX = -(tx / dist);\r\n                bot.velY = -(ty / dist);\r\n            }/* else{\r\n                bot.velX =  -(ty / dist) * Math.cos(bot.angleWithTarget); \r\n                bot.velY = -(tx / dist) * Math.sin(bot.angleWithTarget); \r\n            } */\r\n            bot.x += bot.velX * bot.speed * dt;\r\n            bot.y += bot.velY * bot.speed * dt;\r\n\r\n            this.shot(bot, dist, dt);\r\n        } else {\r\n            // bot.brain.popState();\r\n            bot.brain.pushState(this.spawn.bind(this));\r\n        }\r\n    }\r\n\r\n    shot(bot: any, dist: number, dt: number) {\r\n        if (dist < 350 && this.checkIfIsSeen2(bot.target, bot)) {\t// SE non troppo lontano e visibile SPARA!\r\n            if (bot.currentWeapon.shotNumber > 0) {                 // se l'arma ha proiettili\r\n                let now = Date.now();\r\n                if (now - bot.attackCounter < bot.currentWeapon.frequency) return;\r\n                bot.attackCounter = now;\r\n\r\n                // bullet prediction ->how well bots are aiming!!\r\n                let predvX = (bot.target.x - bot.target.old_x) / (bot.target.speed * dt) / (bot.speed * dt);\r\n                let predvY = (bot.target.y - bot.target.old_y) / (bot.target.speed * dt) / (bot.speed * dt);\r\n\r\n                let vX = (bot.target.x - bot.x);\r\n                let vY = (bot.target.y - bot.y);\r\n                let dist = Math.sqrt(vX * vX + vY * vY);\t    // si calcola la distanza\r\n                vX = vX / dist + predvX;\t\t\t\t\t\t// si normalizza e si calcola la direzione\r\n                vY = vY / dist + predvY;\r\n                for (let i = bot.currentWeapon.count; i >= 0; i--) {\r\n                    this.bullet.create(bot.x, bot.y, vX, vY, 'enemy', bot.index, bot.damage, bot.currentWeapon);\r\n                    bot.currentWeapon.shotNumber--;\r\n                }\r\n            } else {\r\n                bot.weaponsInventory.getBest();\r\n                bot.currentWeapon = bot.weaponsInventory.selectedWeapon;\t// arma corrente\r\n            }\r\n        }\r\n        else {\r\n            // bot.targetItem = bot.target;    // ???\r\n            bot.brain.pushState(this.wander.bind(this));\r\n        }\r\n    }\r\n\r\n    // TODO: https://stackoverflow.com/questions/24378155/random-moving-position-for-sprite-image\r\n\r\n    wander(bot: any, dt: number) {\r\n\r\n        bot.status = 'wander';\r\n        let opponentData = this.getNearestVisibleEnemy(bot, this.main.actors);\r\n        bot.target = opponentData.elem;\r\n\r\n        if (bot.target && bot.target.alive) {\r\n            if (bot.currentWeapon.shotNumber < 1) {\r\n                bot.weaponsInventory.getBest();\r\n                bot.currentWeapon = bot.weaponsInventory.selectedWeapon;\t// arma corrente\r\n            }\r\n            bot.brain.pushState(this.chaseTarget.bind(this));\r\n            // se non si ha un target si va alla ricerca dei powerup\r\n        } else {\r\n            bot.attackCounter = 0;\r\n            bot.angleWithTarget = 0;\r\n            const power_best = this.getNearestPowerup(bot, this.main.powerup.list);\r\n            const waypoint_best = this.getNearestWaypoint(bot, this.main.waypoints.list);\r\n            bot.targetItem = /* bot.targetItem.length>0? bot.targetItem : */ power_best || waypoint_best; // o l'ultima aposizione del target o il powerup + vicino o il waypoint\r\n\r\n            if (bot.alive && bot.targetItem) {\r\n                this.collectPowerUps(bot, dt);\r\n            } else {\r\n                bot.brain.pushState(this.spawn.bind(this));\r\n            }\r\n        }\r\n    }\r\n\r\n    // trova quello con la distanza minore\r\n    getNearestPowerup(origin: any, data: any) {\r\n        let output: any = { dist: 10000 }; // elemento + vicino ad origin\r\n        data = data.filter((elem: any) => elem.visible == true);           //  si esclude quelli non visibili (quelli già presi!)\r\n        // data = data.filter((e:any)=>this.checkIfIsSeen2(origin, e))   // se non sono visibili si va con i waypoint...\r\n        data = data.forEach((e: any) => {\r\n            let distanza = Helper.calculateDistance(origin, e);\r\n            if (output.dist > distanza && distanza < 400) {\r\n                output = { dist: distanza, elem: e };\r\n            }\r\n        })\r\n        return output.elem;\r\n    }\r\n\r\n    // DA PROVARE CON UN NUOVO STATO!\r\n    /* getNearestWaypoint(bot: any, data: any) {\r\n        let  dist:number = 10000 ; // elemento + vicino ad bot\r\n        let result:any =[];\r\n        data\r\n            .filter((elem: any) => elem[bot.index].visible == true) // solo quelli non ancora attraversati dallo specifico bot\r\n            //.filter((e:any)=>this.checkIfIsSeen2(bot, e))       // può essere anche più vicino ma se è dall'altra parte del muro ?!?!\r\n            .forEach((e: any) => {\r\n                let distanza = Helper.calculateDistance(bot, e);\r\n                if (dist > distanza && distanza < 400) {\r\n                    dist = distanza;\r\n                    result.push({ dist: distanza, elem: e });\r\n                }\r\n            });\r\n        if(result.length==0){\r\n            return null;\r\n        } else if(result.length==1){\r\n            return result[0].elem;\r\n        }else{\r\n            return Math.random()<0.95? result[result.length-1].elem:result[result.length-2].elem;\r\n        }\r\n    } */\r\n\r\n    getNearestWaypoint(bot: any, data: any) {\r\n        let output: any = { dist: 10000 }; // elemento + vicino ad bot\r\n        data\r\n            .filter((elem: any) => elem[bot.index].visible == true) // solo quelli non ancora attraversati dallo specifico bot\r\n            //.filter((e:any)=>this.checkIfIsSeen2(bot, e))       // può essere anche più vicino ma se è dall'altra parte del muro ?!?!\r\n            .forEach((e: any) => {\r\n                let distanza = Helper.calculateDistance(bot, e);\r\n                if (output.dist > distanza && distanza < 400) {\r\n                    output = { dist: distanza, elem: e };\r\n                }\r\n            })\r\n        return output.elem;\r\n    }\r\n\r\n    getNearestVisibleEnemy(origin: any, actors: any) {\r\n        let output: any = { dist: 10000 }; // elemento + vicino ad origin\r\n        actors\r\n            .filter((elem: any) => elem.index !== origin.index && elem.alive && elem.team!=origin.team)   // si esclude se stessi, quelli morti e quelli dell'altro team\r\n            .filter((e: any) => this.checkIfIsSeen2(origin, e))                // si escludono quelli non visibili\r\n            .forEach((e: any) => {\r\n                let distanza = Helper.calculateDistance(origin, e);\r\n                if (output.dist > distanza && distanza < 350) {\r\n                    output = { dist: distanza, elem: e };\r\n                }\r\n            });\r\n        return output;\r\n    }\r\n\r\n    collectPowerUps(bot: any, dt: number) {\r\n        \r\n        if (bot.brain.first) {\r\n            // console.log(`Si calcola il path per: ${bot.index}`);\r\n            // al 1° giro si calcola il percorso\r\n            this.findPath(bot);\r\n        } else {\r\n            // dal 2° in poi si \r\n            this.followPath(bot, dt);\r\n        }\r\n    }\r\n\r\n    findPath(bot: any) {\r\n        // Calculate the path-finding path\r\n        let map = this.main.currentMap;\r\n        const s = map.pixelToMapPos(bot);\r\n        const d = map.pixelToMapPos(bot.targetItem);\r\n        const start = performance.now();\r\n        this.main.easystar.findPath(s.x, s.y, d.x, d.y, (path: any) => {\r\n            if (path === null) {\r\n                // console.log(\"Path was not found.\");\r\n            } else {\r\n                //console.log(`Path of bot ${bot.index} was found. First Point is ${path[0].x} ${path[0].y} `);\r\n                bot.path = path || [];\r\n                const end = performance.now();\r\n                //console.log(`Pathfinding took ${end - start} ms for bot ${bot.index}`);\r\n                this.followPath(bot, 16)\r\n            }\r\n        });\r\n        this.main.easystar.calculate();\r\n    }\r\n\r\n    followPath(bot: any, dt: number) {\r\n        let map = this.main.currentMap;\r\n        // Move along the path\r\n        if (!bot.path.length) {\r\n            return;\r\n        }\r\n        const cell = bot.path[0];\r\n        const cellx = ((cell.x * map.tileSize) + map.tileSize / 2) ;\r\n        const celly = ((cell.y * map.tileSize) + map.tileSize / 2) ;\r\n        bot.angleWithTarget = Helper.calculateAngle(bot.x, bot.y, cellx, celly);\r\n        // We need to get the distance\r\n        var tx = cellx - bot.x,\r\n            ty = celly - bot.y,\r\n            dist = Math.sqrt(tx * tx + ty * ty);\r\n        if (dist != 0) {\r\n            bot.velX = (tx / dist);\r\n            bot.velY = (ty / dist);\r\n            bot.old_x = bot.x;\r\n            bot.old_y = bot.y;\r\n            bot.x += bot.velX * bot.speed * dt;\r\n            bot.y += bot.velY * bot.speed * dt;\r\n        }\r\n        // if finished move to the next path element\r\n        if (dist < 3) {\r\n            bot.path = bot.path.slice(1);\r\n            if (bot.path.length === 0) {\r\n                // this.findPath(bot);\r\n                bot.brain.pushState(this.wander.bind(this));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n","import { Helper } from '../helper';\r\n\r\nexport const tipiPowerUp = {\r\n    'health':      { name: 'health', hp:5, color:'DodgerBlue', r: 5, spawnTime:  30000 },\r\n    'megaHealth':  { name: 'megaHealth', hp:50, color:'DodgerBlue', r:10, spawnTime: 30000 },\r\n    'armour':      { name: 'armour', ap:5, color:'green', r:5, spawnTime:  30000 },\r\n    'megaArmour':  { name: 'megaArmour', ap:50, color:'green', r:10, spawnTime: 30000 },\r\n    'quad':        { name: 'quad', multiplier:4, color:'violet', r:10, spawnTime: 30000, enterAfter: 60000, duration: 10000 },\r\n    'speed':       { name: 'speed', multiplier: 1.5, color:'yellow', r:10, spawnTime: 30000, enterAfter: 30000, duration: 10000 },\r\n    'ammoRifle':   { for:  'Rifle', color: 'brown', r:8, spawnTime:30000, amount:30 },\r\n    'ammoShotgun': { for:  'Shotgun', color:'brown', r:8, spawnTime:30000,amount:24 },\r\n    'ammoPlasma':  { for:  'Plasma', color: 'blue', r:8, spawnTime:30000,amount:25 },\r\n    'ammoRocket':  { for:  'Rocket', color: 'red', r:8, spawnTime:30000,amount:5 },\r\n    'ammoRailgun': { for:  'Railgun', color:'green', r:8, spawnTime:30000,amount:5 },\r\n    'weaponShotgun':{ for: 'Shotgun', color:'brown', r:16, spawnTime:30000,amount:24 },\r\n    'weaponPlasma':{ for:  'Plasma', color: 'blue', r:16, spawnTime:30000,amount:25 },\r\n    'weaponRocket':{ for:  'Rocket', color: 'red', r:16, spawnTime:30000,amount:5 },\r\n    'weaponRailgun':{ for: 'Railgun',color:'green', r:16, spawnTime:30000,amount:5 }\r\n}\r\n\r\n\r\n\r\nexport class PowerUp {\r\n\r\n    list: any[] = [];\r\n    pool: any[] = [];\r\n\r\n    player:     any;\r\n    bots:       any;\r\n    particelle: any;\r\n    ctx:        any;\r\n    main:       any;\r\n    c:          any;\r\n\r\n    constructor() { \r\n    }\r\n\r\n    init(main: any){\r\n        this.list = [];\r\n        this.main       = main;\r\n        this.c          = main.c;\r\n        this.player     = main.player;\r\n        this.bots       = main.enemy;\r\n        this.ctx        = main.ctx;\r\n        this.particelle = main.particelle;\r\n    }\r\n\r\n    create(x: number, y: number, type: string, index:number) {\r\n        let powerup        = this.pool.length > 0 ? this.pool.pop(): new Object();\r\n        powerup.type       = tipiPowerUp[type];\r\n        powerup.index      = index;\r\n        powerup.x          = x;\r\n        powerup.y          = y;\r\n        if(type.startsWith('ammo')||type.startsWith('weapon')){\r\n            powerup.ref = type;                     // permette di distinguere tra bullet e weapons\r\n            powerup.amount = powerup.type.amount;   // quanti bullet\r\n            powerup.for = powerup.type.for;         // per quale arma\r\n        }\r\n        powerup.reloadRate = 0;\r\n        powerup.spawnTime  = powerup.type.spawnTime;   // tempo impiegato per respawn\r\n        if(powerup.type.name=='quad' || powerup.type.name=='speed'){\r\n            powerup.visible = false;\r\n            powerup.enterAfter = powerup.type.enterAfter;   // delay di entrata\r\n            powerup.durationRate = 0;                       // indica il contatore della durata\r\n            powerup.duration = powerup.type.duration;       // eventuale durata dell'effetto\r\n            powerup.takenBy = {};                           // indica chi l'o sta utilizzando\r\n        } else {\r\n            powerup.enterAfter = 0;\r\n            powerup.visible    = true;\r\n        }\r\n        powerup.r            = powerup.type.r;  // raggio esterno rotante\r\n        powerup.r1           = powerup.type.r;  // raggio interno dinamico\r\n        powerup.color        = powerup.type.color;\r\n        // animazione SOURCE: https://stackoverflow.com/questions/20445357/canvas-rotate-circle-in-certain-speed-using-requestanimationframe\r\n        powerup.startAngle   = 2*Math.PI;\r\n        powerup.endAngle     = Math.PI*1.5;\r\n        powerup.currentAngle = 0;\r\n        powerup.angleForDinamicRadius = 0;   // animazione del raggio dinamico\r\n        this.list.push(powerup);\r\n    };\r\n\r\n    upgrade(powerup:any, who:any){\r\n        powerup.takenBy = who;\r\n        if(powerup.type.name=='health'){\r\n            who.hp += powerup.type.hp;\r\n        } else if (powerup.type.name=='armour'){\r\n            who.ap += powerup.type.ap;\r\n        } else if (powerup.type.name=='megaHealth'){\r\n            who.hp += powerup.type.hp;\r\n        } else if (powerup.type.name=='megaArmour'){\r\n            who.ap += powerup.type.ap;\r\n        } else if (powerup.type.name=='quad'){\r\n             who.damage *= powerup.type.multiplier;\r\n        } else if (powerup.type.name=='speed'){\r\n             who.speed *= powerup.type.multiplier;\r\n        }\r\n    }\r\n\r\n    deupgrade(powerup:any){\r\n        if(powerup.type.name=='regeneration'){\r\n           console.log('TO DO!');\r\n        } else if (powerup.type.name=='speed'){\r\n            powerup.takenBy.speed /= powerup.type.multiplier;\r\n        } else if (powerup.type.name=='quad'){\r\n            powerup.takenBy.damage /= powerup.type.multiplier;\r\n        }\r\n    }\r\n\r\n    update(dt:number, timestamp:number) {\r\n        for (var i = this.list.length - 1; i >= 0; i--) {\r\n            var powerup = this.list[i];\r\n\r\n            powerup.currentAngle += dt * 0.004;             // animazione del cerchio esterno...\r\n            powerup.angleForDinamicRadius += 2*Math.PI/60;  // animazione del raggio dinamico di 6° a frame\r\n\r\n            /// reset angle\r\n            powerup.currentAngle %= 2 * Math.PI;\r\n\r\n            if (!powerup.visible) {\r\n                powerup.reloadRate+= dt;  // si inizia a contare se non visibile\r\n            }\r\n\r\n            // se non è visibile e ha una durata inizia a contare la durata dell'effetto (quad, speed, etc)\r\n            if(!powerup.visible && powerup.duration && powerup.startDurationRate){\r\n                powerup.durationRate+= dt;\r\n            }\r\n\r\n            // si guarda se i powerup entrano in contatto con il player\r\n            if (powerup.visible && Helper.circleCollision(powerup, this.player)) {\r\n                for (var j = 0; j < 10; j++) {\r\n                    // TODO: cambiare effetto !!!\r\n                    this.particelle.create(powerup.x, powerup.y, Math.random() * 2 - 2, Math.random() * 2 - 2, 2 , powerup.color)\r\n                }\r\n                powerup.visible = false;\r\n                if(powerup.duration){\r\n                    powerup.startDurationRate= true;\r\n                }  \r\n                this.upgrade(powerup, this.player);\r\n                // se AMMO o WEAPON\r\n                if(powerup.ref){\r\n                    if(powerup.ref.startsWith('weapon')){\r\n                        this.player.weaponsInventory.setAvailabilityAndNumOfBullets(powerup.for, powerup.amount);\r\n                    } else{\r\n                        this.player.weaponsInventory.setNumOfBullets(powerup.for, powerup.amount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // si guarda se i powerup entrano in contatto con qualche nemico\r\n            for (let i = this.bots.list.length - 1; i >= 0; i--) {\r\n                const bot = this.bots.list[i];\r\n                if (powerup.visible && Helper.circleCollision(powerup, bot)) {\r\n                    for (var j = 0; j < 12; j++) {\r\n                        this.particelle.create(powerup.x, powerup.y, Math.random() * 2 - 2, Math.random() * 2 - 2, 5, powerup.color)\r\n                    }\r\n                    powerup.visible = false;\r\n                    if(powerup.duration){\r\n                        powerup.startDurationRate= true;\r\n                    }  \r\n                    this.upgrade(powerup, bot);\r\n                    // se AMMO o WEAPON\r\n                    if(powerup.ref){\r\n                        if(powerup.ref.startsWith('weapon')){\r\n                            bot.weaponsInventory.setAvailabilityAndNumOfBullets(powerup.for, powerup.amount);\r\n                            bot.weaponsInventory.getBest();\r\n                            bot.currentWeapon = bot.weaponsInventory.selectedWeapon;\t// arma corrente\r\n                        } else{\r\n                            bot.weaponsInventory.setNumOfBullets(powerup.for, powerup.amount);\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            // RESPAWN\r\n            if (powerup.reloadRate > (powerup.spawnTime + powerup.enterAfter) ) {\t// numero di cicli oltre il quale è nuovamente visibile\r\n                powerup.visible = true;\r\n                powerup.reloadRate = 0;\r\n            }\r\n                \r\n            // FINE EFFETTO \r\n            if(powerup.durationRate> powerup.duration){\r\n                this.deupgrade(powerup);   // FIXME: per ora è solo per il player...\r\n                powerup.startDurationRate= false;\r\n                powerup.durationRate = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        for (let i = this.list.length - 1; i >= 0; i--) {\r\n            let powerup = this.list[i];\r\n            // tutti i powerup tranne ammo e weapons\r\n            if (powerup.visible && !powerup.ref) {\r\n                // centro pulsante\r\n                powerup.r1 =  2 + 0.1 + Math.sin(powerup.angleForDinamicRadius)*2;   // il sin va da -1 a +1\r\n                let x = powerup.x - this.main.camera.x;\r\n                let y = powerup.y - this.main.camera.y;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, powerup.r1, 0, 6.2832);\r\n                this.ctx.fillStyle = powerup.color;\r\n                this.ctx.fill();\r\n                this.ctx.closePath()\r\n\r\n                // cerchio esterno\r\n                this.ctx.beginPath();                  \r\n                this.ctx.arc(x, y, powerup.r + 2.5, powerup.startAngle + powerup.currentAngle, powerup.endAngle + powerup.currentAngle, false);\r\n                this.ctx.strokeStyle = powerup.color;\r\n                this.ctx.lineWidth = 2.0;\r\n                this.ctx.stroke();\r\n                if (this.main.debug) {\r\n                    this.ctx.font = 'bold 8px/1 Arial';\r\n                    this.ctx.fillStyle = 'black';\r\n                    this.ctx.fillText(powerup.index.toString(), powerup.x - this.main.camera.x - 6, powerup.y - this.main.camera.y -12);\r\n                }\r\n\r\n            } \r\n            if(powerup.visible){\r\n                // AMMO e WEAPONS\r\n                let x = powerup.x - this.main.camera.x;\r\n                let y = powerup.y - this.main.camera.y;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, powerup.r, 0, 6.2832);\r\n                this.ctx.fillStyle = powerup.color;\r\n                this.ctx.fill();\r\n                this.ctx.closePath()\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n","import {Helper} from'./helper';\r\n/* import Game from './game'; */\r\n\r\nexport class ControlHandler {\r\n\r\n    a:          boolean = false;\r\n    d:          boolean = false;\r\n    w:          boolean = false;\r\n    s:          boolean = false;\r\n    mouseLeft:  boolean = false;\r\n    mouseRight: boolean = false;\r\n    mouseX:     number  = 0;\r\n    mouseY:     number = 0;\r\n\r\n    main:   any;\r\n    canvas: any;\r\n    camera: any;\r\n    player: any;\r\n\r\n    back2Player:boolean = true;\r\n\r\n    constructor(main: any){\r\n        this.main   = main;\r\n        this.canvas = main.canvas;\r\n        this.camera = main.camera;\r\n        this.player = main.player;\r\n\r\n        this.canvas.addEventListener('keydown', this.keyDownEvent.bind(this));\r\n        this.canvas.addEventListener('keyup', this.keyUpEvent.bind(this));\r\n        this.canvas.addEventListener('mousedown', this.mouseDownEvent.bind(this));\r\n        this.canvas.addEventListener('mouseup', this.mouseUpEvent.bind(this));\r\n        this.canvas.addEventListener('mousemove', this.mouseMoveEvent.bind(this));\r\n        this.canvas.addEventListener('contextmenu', this.contextMenuEvent.bind(this))\r\n        window.addEventListener('mousewheel', this.mouseWheelEvent.bind(this));\r\n        window.addEventListener('DOMMouseScroll', this.mouseWheelEvent.bind(this));\r\n    }\r\n\r\n    keyDownEvent(e:any) {\r\n        if (e.keyCode == 87) {\r\n            this.w = true\r\n        } else if (e.keyCode == 83) {\r\n            this.s = true\r\n        } else if (e.keyCode == 65) {\r\n            this.a = true\r\n        } else if (e.keyCode == 68) {\r\n            this.d = true\r\n        } else if ((e.keyCode >= 48 || e.keyCode <= 57) && this.main.state == 'game') {\r\n            this.player.hotKey(e.keyCode)\r\n        }\r\n        if (this.mouseX > 0 && this.mouseX < this.canvas.width && this.mouseY > 0 && this.mouseY < this.canvas.height) {\r\n            e.preventDefault();\r\n            return false\r\n        }\r\n    }\r\n    \r\n    keyUpEvent(e: any) {\r\n        if (e.keyCode == 87 || e.keyCode == 38) {\r\n            this.w = false\r\n        } else if (e.keyCode == 83) {\r\n            this.s = false\r\n        } else if (e.keyCode == 65) {\r\n            this.a = false\r\n        } else if (e.keyCode == 66) {\r\n            this.back2Player =!this.back2Player;\r\n            this.followBot(this.back2Player);\r\n        }else if (e.keyCode == 68) {\r\n            this.d = false\r\n        } else if (e.keyCode == 71) {   // g\r\n            this.main.player.godMode = !this.main.player.godMode;\r\n        } else if(e.keyCode == 73){     // i per debug\r\n            this.main.debug = !this.main.debug;\r\n        }else if (e.keyCode == 80) {\r\n            if (!this.main.paused) {    // se non è già in pausa...\r\n                this.main.paused = !this.main.paused;\r\n                if(this.main.paused){\r\n                    this.main.loadPauseScreen(this.main);\r\n             }\r\n            }\r\n        } else if (this.mouseX > 0 && this.mouseX < this.canvas.width && this.mouseY > 0 && this.mouseY < this.canvas.height) {\r\n            e.preventDefault();\r\n            return false\r\n        }\r\n    }\r\n\r\n    // permette di ciclare tra i bot\r\n    followBot(back:boolean){\r\n        const botIndex = Helper.getBotsName(this.main.enemy.list.map(e=>e.index));  // FIXME: è usato sia per i nomi che per l'index\r\n        let currentActorInCamera = back?this.player: this.main.enemy.list[botIndex];\r\n\t\tthis.main.camera.setCurrentPlayer(currentActorInCamera);\r\n\t\tthis.main.camera.adjustCamera(currentActorInCamera);\r\n    }\r\n    \r\n    mouseDownEvent(e:any) {\r\n        if (e.button == 0) {\r\n            this.mouseLeft = true\r\n        } else if (e.button == 2) {\r\n            this.mouseRight = true\r\n        }\r\n    }\r\n    \r\n    mouseUpEvent(e:any) {\r\n        if (this.mouseLeft) {\r\n            if (this.main.state == 'menuScreen') {\r\n                // this.main.startGame();\r\n                console.log(e);\r\n\r\n            }\r\n            if (this.main.paused) {\r\n                this.main.paused= false;\r\n            }\r\n            if (this.main.state == 'statsScreen') {\r\n                this.main.startGame();\r\n            }\r\n        }\r\n\r\n        if (e.button == 0) {\r\n            this.mouseLeft = false;\r\n        } else if (e.button == 2) {\r\n            this.mouseRight = false;\r\n        }\r\n    }\r\n\r\n    mouseMoveEvent(e:any) {\r\n        var rect = this.canvas.getBoundingClientRect();\r\n        this.mouseX = e.clientX - rect.left;    // tra 0 e 800\r\n        this.mouseY = e.clientY - rect.top;     // tra 0 e 600\r\n        // angolo tra il player e il mirino\r\n        this.player.angle = Helper.calculateAngle(this.player.x - this.camera.x, this.player.y -this.camera.y, this.mouseX, this.mouseY);\r\n    }\r\n\r\n    mouseWheelEvent(e:any) {\r\n         if (this.main.state == 'game') {\r\n            this.player.wheel(e.wheelDelta ? e.wheelDelta : -e.detail);\r\n            return true;\r\n        }\r\n        if (this.mouseX > 0 && this.mouseX < this.canvas.width && this.mouseY > 0 && this.mouseY < this.canvas.height) {\r\n            e.preventDefault();\r\n            return false\r\n        }\r\n    }\r\n    \r\n    contextMenuEvent(e:any) {\r\n        e.preventDefault()\r\n    }\r\n\r\n}\r\n\r\n","import { Helper } from '../helper';\r\nimport { WeaponsInventory } from './weapons';\r\nexport class Player {\r\n\r\n\t// PLAYER\r\n\tx: number;\r\n\told_x: number;\r\n\ty: number;\r\n\told_y: number;\r\n\tr: number\r\n\tspeed: number;\r\n\tangle: number;\t\t\t\t// angolo con il mirino (dove punta l'arma)\r\n\r\n\tname: string;\r\n\thp: number;\t\t\t\t\t// punti vita\r\n\tap: number;\t\t\t\t\t// punti armatura\r\n\tkills: number;\t\t\t\t// nemici uccisi\r\n\tscore: number = 0;\t\t\t// numero di uccisioni\r\n\tnumberOfDeaths: number;\t\t// numero di volte in vui è stato ucciso\r\n\r\n\ttrails: any[] = [];\r\n\r\n\tdamage: number;\t\t\t\t// 1 capacità di far danno 1 normale 4 quaddamage\r\n\talive: boolean;\t\t\t\t// se il player è vivo o morto ()\r\n\tindex: number;\t\t\t\t// è l'id del giocatore\r\n\trespawnTime: number = 0;\r\n\t\r\n\tgodMode: boolean = false;\r\n\r\n\tteam:string;\r\n\t\r\n\tweaponsInventory: WeaponsInventory;\r\n\tcurrentWeapon: any;\t\t\t// arma corrente\r\n\tattackCounter: number = 0;\t\t// frequenza di sparo\r\n\t// shootRate:     number = 200;\t// frequenza di sparo\r\n\r\n\tcanvas:  any;\r\n\tctx:     any;\r\n\tcamera:  any;\r\n\tmain:    any\r\n\tenemy:   any\r\n\tc:       any\r\n\tmap:     any\r\n\tcontrol: any;\r\n\tbullet:  any;\r\n\r\n\r\n\tconstructor() {\r\n\t}\r\n\r\n\tinit(main: any) {\r\n\t\tthis.main = main;\r\n\t\tthis.c = main.c;\r\n\t\tthis.canvas = main.canvas;\r\n\t\tthis.ctx = main.ctx;\r\n\t\tthis.camera = main.camera;\r\n\t\tthis.enemy = main.enemy;\r\n\t\tthis.bullet = main.bullet;\r\n\t\tthis.map = main.currentMap;\r\n\t\tthis.control = main.control;\r\n\t}\r\n\r\n\tcreatePlayer() {\r\n\t\tthis.name = \"Lorenzo\";\r\n\t\tthis.index = 100;\r\n\t\tthis.alive = true;\t\t\t\t// \r\n\t\t// const spawn = Helper.getSpawnPoint(this.main.data.spawn);\r\n\t\tthis.x     = 400;\r\n\t\tthis.old_x = 400;\r\n\t\tthis.y     = 300;\r\n\t\tthis.old_y = 300;\r\n\t\tthis.team = 'team1';\r\n\t\t//this.camera.adjustCamera(this);\r\n\t\tthis.r = this.c.PLAYER_RADIUS\r\n\t\tthis.speed = this.c.PLAYER_SPEED;\t// è uguale in tutte le direzioni\r\n\t\tthis.damage = 1;\t\t\t\t\t// danno da moltiplicare per 4 con quad damage\r\n\t\tthis.angle = 0;\t\t\t\t\t\t// angolo tra asse x e puntatore del mouse\r\n\t\tthis.hp = this.c.PLAYER_HP;\t\t\t// punti vita\r\n\t\tthis.ap = this.c.PLAYER_AP;\t\t\t// punti armatura\r\n\t\tthis.kills = 0;\t\t\t\t\t\t// uccisioni\r\n\t\tthis.numberOfDeaths = 0;\t    \t// numero di volte in cui è stato ucciso\r\n\r\n\t\tthis.weaponsInventory = new WeaponsInventory();\r\n\t\tthis.currentWeapon = this.weaponsInventory.selectedWeapon;\t\t// arma corrente\r\n\t}\r\n\r\n\tstorePosForTrail(x: number, y: number) {\r\n\t\t// push an item\r\n\t\tthis.trails.push({ x, y });\r\n\t\t//get rid of first item\r\n\t\tif (this.trails.length > this.c.MOTION_TRAILS_LENGTH) {\r\n\t\t\tthis.trails.shift();\r\n\t\t}\r\n\t}\r\n\r\n\thotKey(keyCode:number) {\r\n\t\tif (keyCode == 48) {\r\n\t\t\tkeyCode = 58\r\n\t\t}\r\n\t\tif (keyCode - 49 in this.weaponsInventory.weapons) {\r\n\t\t\tthis.weaponsInventory.weapon = keyCode - 49;\r\n\t\t\t// se disponibile si sceglie\r\n\t\t\tif(this.weaponsInventory.weapons[this.weaponsInventory.weapon].available){\r\n\t\t\t\tthis.weaponsInventory.selectedWeapon = this.weaponsInventory.weapons[this.weaponsInventory.weapon];\r\n\t\t\t\tthis.currentWeapon = this.weaponsInventory.selectedWeapon;\t\t// arma corrente\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\twheel(delta: number) {\r\n\t\tif (delta > 0) {\r\n\t\t\tif (this.weaponsInventory.weapon <= 0) {\r\n\t\t\t\tthis.weaponsInventory.weapon = this.weaponsInventory.weapons.length - 1\r\n\t\t\t} else {\r\n\t\t\t\tthis.weaponsInventory.weapon--;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.weaponsInventory.weapon >= this.weaponsInventory.weapons.length - 1) {\r\n\t\t\t\tthis.weaponsInventory.weapon = 0\r\n\t\t\t} else {\r\n\t\t\t\tthis.weaponsInventory.weapon++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// se disponibile si sceglie\r\n\t\tif(this.weaponsInventory.weapons[this.weaponsInventory.weapon].available){\r\n\t\t\tthis.weaponsInventory.selectedWeapon = this.weaponsInventory.weapons[this.weaponsInventory.weapon];\r\n\t\t\tthis.currentWeapon = this.weaponsInventory.selectedWeapon;\t\t// arma corrente\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate getPlayerColour() {\r\n\t\tif (this.speed > 4 / 16) {\r\n\t\t\treturn 'yellow';\r\n\t\t}\r\n\t\tif (this.damage > 1) {\r\n\t\t\treturn 'violet';\r\n\t\t}\r\n\t\treturn this.c.PLAYER_COLOUR_INSIDE;\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.alive) {\t// solo se il player è vivo!\r\n\r\n\t\t\t// trails\r\n\t\t\t for (let i = 0; i < this.trails.length; i++) {\r\n\t\t\t \tlet ratio = (i + 1) / this.trails.length;\r\n\t\t\t \tthis.ctx.beginPath();\r\n\t\t\t \tthis.ctx.arc(this.trails[i].x - this.camera.x, this.trails[i].y - this.camera.y, ratio * this.r *(3/ 5) + this.r *(2/ 5), 0, 2 * Math.PI, true);\r\n\t\t\t \tthis.ctx.fillStyle = this.ctx.fillStyle = `rgb(127, 134, 135,${ratio/2})`;\r\n\t\t\t \tthis.ctx.fill();\r\n\t\t\t }\r\n\t\t\t// draw the colored region\r\n\t\t\tthis.ctx.beginPath();\r\n\t\t\tthis.ctx.arc(this.x - this.camera.x, this.y - this.camera.y, this.r, 0, 2 * Math.PI, true);\r\n\t\t\tthis.ctx.fillStyle = this.getPlayerColour();\r\n\t\t\tthis.ctx.fill();\r\n\r\n\t\t\t// draw the stroke\r\n\t\t\tthis.ctx.lineWidth = 2;\r\n\t\t\tthis.ctx.strokeStyle = this.c.PLAYER_COLOUR_OUTSIDE;\r\n\t\t\tthis.ctx.stroke();\r\n\r\n\r\n\t\t\t// beccuccio arma\r\n\t\t\tthis.ctx.strokeStyle = this.c.PLAYER_COLOUR_OUTSIDE;\r\n\t\t\tthis.ctx.beginPath();\r\n\t\t\tthis.ctx.moveTo(this.x - this.camera.x, this.y - this.camera.y);\r\n\t\t\tvar pointerLength = 12.5;\r\n\t\t\tthis.ctx.lineTo(\r\n\t\t\t\tthis.x - this.camera.x + pointerLength * Math.cos(this.angle),\r\n\t\t\t\tthis.y - this.camera.y + pointerLength * Math.sin(this.angle)\r\n\t\t\t);\r\n\t\t\tthis.ctx.stroke();\r\n\r\n\t\t\tif (this.main.debug) {\r\n\t\t\t\tthis.ctx.font = 'bold 8px/1 Arial';\r\n\t\t\t\tthis.ctx.fillStyle = 'black';\r\n\t\t\t\tthis.ctx.fillText(this.x.toFixed(2).toString(), this.x - this.camera.x - 5, this.y - this.camera.y - 15);\r\n\t\t\t\tthis.ctx.fillText(this.y.toFixed(2).toString(), this.x - this.camera.x - 5, this.y - this.camera.y + 20);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trespawn(timestamp:number) {\r\n\t\tconst spawn = Helper.getSpawnPoint(this.main.data.spawn);\r\n\t\tconsole.log(`Player is swawning at ${spawn.x} - ${spawn.y}`);\r\n\t\tthis.index = 100;\r\n\t\tthis.x = spawn.x;\r\n\t\tthis.y = spawn.y;\r\n\t\tthis.camera.setCurrentPlayer(this);\r\n\t\tthis.camera.adjustCamera(this);\r\n\r\n\t\tlet amplitude = 100;\r\n\t\t\r\n\t\tsetTimeout(() => {\t\r\n\t\t\t\tfor (let i = 0; i < 100; i++) {\r\n\t\t\t\t\tlet beta = timestamp + i*20 + + Math.PI / 2;\r\n\t\t\t\t\tlet respawnParticles: any = {};\r\n\t\t\t\t\trespawnParticles.x = this.x  + Math.cos(beta) * Helper.randBetween(0,amplitude);\r\n\t\t\t\t\trespawnParticles.y = this.y  + Math.sin(beta) * Helper.randBetween(0,amplitude);\r\n\t\t\t\t\tthis.main.particelle.create(respawnParticles.x, respawnParticles.y , 0.5,0.5, 6, Helper.randomElementInArray(this.c.PLAYER_RESPAWN));\r\n\t\t\t\t}\t\t\r\n\t\t}, 150);\r\n\r\n\t\tthis.r = this.c.PLAYER_RADIUS\r\n\t\tthis.speed = this.c.PLAYER_SPEED;\t// è uguale in tutte le direzioni\r\n\t\tthis.damage = 1;\t\t\t\t\t// è il moltiplicatore del danno (quad = 4)\r\n\t\tthis.angle = 0;\t\t\t\t\t\t// angolo tra asse x e puntatore del mouse\r\n\t\tthis.hp = this.c.PLAYER_HP;\t\t\t// punti vita\r\n\t\tthis.ap = this.c.PLAYER_AP;\t\t\t // punti armatura\r\n\t\tthis.alive = true;\t\t\t\t\t// il player è nuovamente presente in gioco\r\n\t\t// this.kills = 0;\t\t\t\t\t// si mantengono...\r\n\t\t// this.numberOfDeaths = 0;\t    \t// si mantengono...\r\n\t\tthis.weaponsInventory.resetWeapons();                    \t// munizioni e disponibilità default\r\n\t\tthis.weaponsInventory.setWeapon(0);\t\t\t\t\t\t\t// arma default\r\n\t\tthis.currentWeapon = this.weaponsInventory.selectedWeapon;\t// arma corrente\r\n\r\n\t}\r\n\r\n\t// collisione tra elementi della stessa dimensione (tile e player)\r\n\t// SOURCE: https://codereview.stackexchange.com/questions/60439/2d-tilemap-collision-method\r\n\tcheckmove(x: number, y: number): boolean {\r\n\t\tif (this.map.map[Math.floor(y / this.c.TILE_SIZE)][Math.floor(x / this.c.TILE_SIZE)] == 1\r\n\t\t\t|| this.map.map[Math.floor(y / this.c.TILE_SIZE)][Math.ceil(x / this.c.TILE_SIZE)] == 1\r\n\t\t\t|| this.map.map[Math.ceil(y / this.c.TILE_SIZE)][Math.floor(x / this.c.TILE_SIZE)] == 1\r\n\t\t\t|| this.map.map[Math.ceil(y / this.c.TILE_SIZE)][Math.ceil(x / this.c.TILE_SIZE)] == 1) {\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tisLavaOrToxic(x: number, y: number): void {\r\n\t\tif (this.map.map[Math.floor(y / this.c.TILE_SIZE)][Math.floor(x / this.c.TILE_SIZE)] == 3\r\n\t\t\t|| this.map.map[Math.floor(y / this.c.TILE_SIZE)][Math.ceil(x / this.c.TILE_SIZE)] == 3\r\n\t\t\t|| this.map.map[Math.ceil(y / this.c.TILE_SIZE)][Math.floor(x / this.c.TILE_SIZE)] == 3\r\n\t\t\t|| this.map.map[Math.ceil(y / this.c.TILE_SIZE)][Math.ceil(x / this.c.TILE_SIZE)] == 3\r\n\t\t\t|| this.map.map[Math.floor(y / this.c.TILE_SIZE)][Math.floor(x / this.c.TILE_SIZE)] == 4\r\n\t\t\t|| this.map.map[Math.floor(y / this.c.TILE_SIZE)][Math.ceil(x / this.c.TILE_SIZE)] == 4\r\n\t\t\t|| this.map.map[Math.ceil(y / this.c.TILE_SIZE)][Math.floor(x / this.c.TILE_SIZE)] == 4\r\n\t\t\t|| this.map.map[Math.ceil(y / this.c.TILE_SIZE)][Math.ceil(x / this.c.TILE_SIZE)] == 4\r\n\t\t) {\r\n\t\t\tthis.hp -= 0.5;\r\n\t\t\tfor (var j = 0; j < 24; j++) {\r\n\t\t\t\tthis.main.particelle.create(this.x + Helper.randBetween(-this.r, this.r), this.y + Helper.randBetween(-this.r, this.r), Math.random() * 2 - 2, Math.random() * 2 - 2, 2, Helper.randomElementInArray(this.c.FIRE_IN_LAVA))\r\n\t\t\t}\r\n\t\t\tif (this.hp <= 0) {\r\n\t\t\t\tthis.alive = false;\r\n\t\t\t\tthis.numberOfDeaths++;\r\n\t\t\t\tfor (let b = 0; b < 36; b++) {\r\n\t\t\t\t\tthis.main.blood.create(this.x, this.y, Math.random() * 2 - 2, Math.random() * 2 - 2, this.c.BLOOD_RADIUS) // crea il sangue\r\n\t\t\t\t}\r\n\t\t\t\tlet currentActorInCamera = this.enemy.list[0];\r\n\t\t\t\tthis.main.camera.setCurrentPlayer(currentActorInCamera);\r\n\t\t\t\tthis.main.camera.adjustCamera(currentActorInCamera);\r\n\t\t\t\t// setTimeout(() =>this.player.respawn(), this.c.GAME_RESPAWN_TIME);\r\n\t\t\t\tconsole.log(`Player killed by lava.`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcollisionDetection(dt: number) {\r\n\t\tlet spostamento = this.speed * dt;\r\n\t\tthis.old_x = this.x;\r\n\t\tthis.old_y = this.y;\r\n\t\tif (this.control.w) { // W \r\n\t\t\t// collisione con nemici\r\n\t\t\tthis.enemy.list.forEach((enemy:any) => {\r\n\t\t\t\tif(enemy.alive && Helper.circleCollision(enemy, this)){\r\n\t\t\t\t\tthis.y += 4*spostamento;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (this.checkmove(this.x - this.r, this.y - this.r - spostamento)) {\r\n\t\t\t\tthis.y -= spostamento;\r\n\t\t\t\tif (this.y - this.r < this.camera.y) {\r\n\t\t\t\t\tthis.y = this.camera.y + this.r;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.control.s) {\t// S\r\n\t\t\t// collisione con nemici\r\n\t\t\tthis.enemy.list.forEach((enemy:any) => {\r\n\t\t\t\tif(enemy.alive && Helper.circleCollision(enemy, this)){\r\n\t\t\t\t\tthis.y -= 4*spostamento;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (this.checkmove(this.x - this.r, this.y - this.r + spostamento)) {\r\n\t\t\t\tthis.y += spostamento;\r\n\t\t\t\tif (this.y + this.r >= this.camera.y + this.camera.h) {\r\n\t\t\t\t\tthis.y = this.camera.y + this.camera.h - this.r;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.control.a) {\t// a\r\n\t\t\t// collisione con nemici\r\n\t\t\tthis.enemy.list.forEach((enemy:any) => {\r\n\t\t\t\tif(enemy.alive && Helper.circleCollision(enemy, this)){\r\n\t\t\t\t\tthis.x += 4*spostamento;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (this.checkmove(this.x - this.r - spostamento, this.y - this.r)) {\r\n\t\t\t\tthis.x -= spostamento;\r\n\t\t\t\tif (this.x - this.r < this.camera.x) {\r\n\t\t\t\t\tthis.x = this.camera.x + this.r;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.control.d) {\t// d\r\n\t\t\t// collisione con nemici\r\n\t\t\tthis.enemy.list.forEach((enemy:any) => {\r\n\t\t\t\tif(enemy.alive && Helper.circleCollision(enemy, this)){\r\n\t\t\t\t\tthis.y -= 4* spostamento;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (this.checkmove(this.x - this.r + spostamento, this.y - this.r)) {\r\n\t\t\t\tthis.x += spostamento;\r\n\t\t\t\tif (this.x + this.r >= this.map.mapSize.w) {\r\n\t\t\t\t\tthis.x = this.camera.x + this.camera.w - this.r;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.storePosForTrail(this.x, this.y);\r\n\t}\r\n\r\n\tshoot(dt: number) {\r\n\t\tif (this.alive && this.currentWeapon.shotNumber>0) {\r\n\t\t\tlet now = Date.now();\r\n\t\t\tif (now - this.attackCounter < this.currentWeapon.frequency) return;\r\n\t\t\tthis.attackCounter = now;\r\n\t\t\tlet vX = (this.control.mouseX - (this.x - this.camera.x));\r\n\t\t\tlet vY = (this.control.mouseY - (this.y - this.camera.y));\r\n\t\t\tlet dist = Math.sqrt(vX * vX + vY * vY);\t// si calcola la distanza\r\n\t\t\tvX = vX / dist;\t\t\t\t\t\t\t\t// si normalizza\r\n\t\t\tvY = vY / dist;\r\n\t\t\tfor (let i = this.currentWeapon.count-1; i >= 0; i--) {\r\n\t\t\t\tthis.bullet.create(this.x, this.y, vX, vY, 'player', this.index, this.damage, this.currentWeapon);  // 8 è la velocità del proiettile\r\n\t\t\t\tthis.currentWeapon.shotNumber--;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t// da valutare se prevederlo in automatico\r\n\t\t\tthis.weaponsInventory.getBest();\r\n            this.currentWeapon = this.weaponsInventory.selectedWeapon;\t// arma corrente\r\n\t\t}\r\n\t}\r\n\r\n\tupdate(dt: number, timestamp: number) {\r\n\r\n\t\tif (this.alive) {\r\n\t\t\tthis.isLavaOrToxic(this.x, this.y);\r\n\t\t\tthis.collisionDetection(dt);\r\n\t\t\tif (this.control.mouseLeft) {\t// SE è PREMUTO IL btn del mouse\r\n\t\t\t\tthis.shoot(dt);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!this.alive) {\r\n\t\t\tthis.respawnTime += dt;\r\n\t\t\tif (this.respawnTime > this.c.GAME_RESPAWN_TIME) {\t// numero di cicli oltre il quale è nuovamente visibile\r\n\t\t\t\tthis.respawn(timestamp);\r\n\t\t\t\tthis.respawnTime = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n","export class Config {\r\n    \r\n    // CANVAS\r\n    CANVAS_WIDTH:         number = 800;\r\n    CANVAS_HEIGHT:        number = 600;\r\n    // MAP\r\n    TILE_SIZE:            number = 25;\r\n    // GAME\r\n    GAME_KILLS_TO_WIN:    number = 15;\r\n    GAME_MATCH_DURATION:  number = 300000; // in ms \r\n    GAME_BOTS_PER_MATCH:  number = 5;\r\n    GAME_RESPAWN_TIME:    number = 5000;   // in ms\r\n    GAME_MATCH_TYPE:      string = 'team'; // 'deathmatch'  // o team, ctf\r\n    WAYPOINTS_TIMING:     number = 8000;\r\n    // HUD\r\n    FONT_FAMILY:          string = '\"Segoe UI\",Arial,sans-serif';\r\n    HUD_BACKGROUND:       string = \"rgba(102, 136, 204, 0.5)\";\r\n    // PLAYER\r\n    PLAYER_SPEED:         number = 3.5/16;\r\n    PLAYER_RADIUS:        number = 12.5;\r\n    PLAYER_HP:            number = 100;\r\n    PLAYER_AP:            number = 100;\r\n    PLAYER_COLOUR_INSIDE: string = '#6688cc';\r\n    PLAYER_COLOUR_OUTSIDE: string = '#4b58a0';\r\n    PLAYER_RESPAWN:string[]=['#808080','#608feb','#7da1ea','#99b2e8','#b4c4ea','#cdd5ef','#e6e6fa']; // Crimson, red, yellow, lightyellow\r\n    // ENEMIES\r\n    ENEMY_SPEED:           number = 3.5/16;\r\n    ENEMY_RADIUS:          number = 12.5;\r\n    ENEMY_HP:              number = 100;\r\n    ENEMY_AP:              number = 100;\r\n    ENEMY_STARTING_WEAPON: string = 'rifle';\r\n    ENEMY_COLOUR_INSIDE:   string = '#f90c00';\r\n    ENEMY_COLOUR_OUTSIDE:  string = '#bb0b00';\r\n    ENEMY_NAMES:string[] = ['Ranger','Phobos','Mynx','Orbb','Sarge','Grunt','Hunter','Klesk','Slash','Anarki','Razor','Visor','Bones','Doom','Major','Xaero'],\r\n    ENEMY_RESPAWN:string[] = ['#ff0000','#eb0001','#d60002','#c40002','#b10002','#9d0002','#8b0000']; // from red to darkred\r\n    \r\n    MOTION_TRAILS_LENGTH:   number = 10;\r\n    // BULLETS\r\n    BULLET_RADIUS:number = 2.5;\r\n    BULLET_DAMAGE:number = 5;\r\n    BULLET_TTL:number = 1000;\r\n    // DETRITI\r\n    DEBRIS_COLOR:string[] = ['#800000','#812314','#823624','#814734','#7e5544','#796556','#727267']; // from maroon to #727267\r\n    DEBRIS_RADIUS:number = 3;\r\n    // SANGUE\r\n    BLOOD_COLOUR:string[] = ['#ff0000','#eb0001','#d60002','#c40002','#b10002','#9d0002','#8b0000']; // from red to darkred\r\n    BLOOD_RADIUS:number = 4;\r\n    // WEAPONS\r\n    FIRE_IN_LAVA:string[]=['#ffffe0','#fff1c4','#ffe2a5','#ffd587','#ffc667','#ffb541','#ffa500']; // lightyellow, orange, #FFA500\r\n    FIRE_EXPLOSION:string[]=['#808080','#ff6000','#ff8811','#ffab2b','#ffcb4b','#ffe878','#ffffe0']; // Crimson, red, yellow, lightyellow\r\n    // POWERUP\r\n    POWERUP_RADIUS:number = 6;\r\n    POWERUP_SPAWN_TIME:number = 30*1000;\r\n}\r\n\r\n/*\r\nPoteva essere usato anche una classe con proprietà statiche:\r\nhttps://medium.com/@haidermalik504/classes-in-typescript-ec5e75196201\r\n*/\r\n\r\n/*\r\n\r\n    For colors: http://gka.github.io/chroma.js/#cubehelix-hue\r\n    https://gka.github.io/palettes\r\n\r\n*/\r\n","export class Camera {\r\n\r\n    x:             number;\r\n    y:             number;\r\n    w:             number;\r\n    h:             number;\r\n    currentPlayer: any;\r\n    map:           any;\r\n    main:          any;\r\n    c:             any;\r\n\r\n    constructor() { \r\n    }\r\n\r\n    init(x: number, y: number, w: number, h: number, main:any){\r\n        this.x    = x || 0;\r\n        this.y    = y || 0;\r\n        this.w    = w || 800;\r\n        this.h    = h || 600;\r\n        this.currentPlayer = main.player;\r\n        this.main = main;\r\n        this.c = main.c;\r\n        this.map = main.currentMap;\r\n    }\r\n\r\n    // setta la telecamera sull'eventuale bot...\r\n    setCurrentPlayer(player:any){\r\n        this.currentPlayer = player;\r\n    }\r\n\r\n    update(dt:number, timestamp:number) {\r\n        // si evita di aggiornare la camera quando si arriva al bordo della mappa\r\n        if (this.currentPlayer.x > (this.w / 2) && this.currentPlayer.x < this.map.mapSize.w - (this.w / 2)) {\r\n            this.x = this.currentPlayer.x - (this.w / 2);\r\n        }\r\n        if (this.currentPlayer.y > (this.h / 2) && this.currentPlayer.y < this.map.mapSize.h - (this.h / 2)) {\r\n            this.y = this.currentPlayer.y - (this.h / 2);\r\n        }\r\n    }\r\n\r\n    // adjust camera after respawn\r\n    adjustCamera(actor:any){\r\n\t\tif(actor.x > (this.map.mapSize.w - this.c.CANVAS_WIDTH)){\r\n            this.x = this.map.mapSize.w - this.c.CANVAS_WIDTH;\r\n\t\t}\r\n\t\tif(actor.x < this.c.CANVAS_WIDTH){\r\n            this.x = 0;\r\n\t\t}\r\n\t\tif(actor.y < this.c.CANVAS_HEIGHT){\r\n\t\t\tthis.y = 0;\r\n\t\t}\r\n\t\tif(actor.y > (this.map.mapSize.h - this.c.CANVAS_HEIGHT)){\r\n            this.y = this.map.mapSize.h - this.c.CANVAS_HEIGHT;\r\n        }\r\n\t}\r\n\r\n};","export const demoMap2 = [\r\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,25,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1],\r\n    [1,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1],\r\n    [1,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,11,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1],\r\n    [1,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,2,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,10,0,0,0,10,0,40,0,10,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,3,3,3,3,3,1],\r\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,10,0,40,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,0,0,0,0,40,0,0,0,0,3,3,3,3,3,1],\r\n    [1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,1,1,0,0,27,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,27,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,10,0,0,0,0,40,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,10,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,,1,1,1,1,1,1],\r\n    [1,0,10,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,,1,1,1,1,1,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,29,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,10,0,0,1,1,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,10,0,40,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,1,1,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,12,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,2,0,1,1,0,0,0,0,1,1,1,0,0,0,0,40,0,0,0,0,0,1,1,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,10,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,10,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,1],\r\n    [1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,29,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,10,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,12,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,40,0,0,0,0,0,0,34,0,0,0,0,0,0,40,0,0,0,0,0,1,1,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1],\r\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,24,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,1,1,0,0,2,0,0,0,0,0,0,40,0,0,1,1,0,0,0,0,15,0,0,0,0,0,1,1,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,1,0,0,2,0,0,0,0,0,40,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],\r\n    [1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n    [1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n    [1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n    [1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n    [1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n    [1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n    [1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 ]\r\n];","import { demoMap } from './maps/dm0';\r\nimport { demoMap2 } from './maps/dm1';\r\n\r\n\r\n\r\nexport const types = [\r\n    { id: 0, colour: '#ddd5d5', solid: 0 },                                   // tile navigabile\r\n    { id: 1, colour: '#868679', solid: 1 }\r\n    \r\n    /*// tile solida\r\n    // ENVIRONMENT\r\n    { id: 2, colour: '#ddd5d5', solid: 0, desc: 'SPAWN' },                            // spawn points\r\n    { id: 3, colour: '#ddd5d5', solid: 0, desc: 'lava', damage: 1 },                  // lava\r\n    { id: 4, colour: '#ddd5d5', solid: 0, desc: 'toxic water', damage: 1 },           // toxic water\r\n    { id: 5, colour: '#ddd5d5', solid: 0, desc: 'water', friction: 1 },               //  water\r\n    { id: 6, colour: '#ddd5d5', solid: 0, desc: 'portals', destination: {r:1,c:2} },  // portals\r\n    { id: 7, colour: '#ddd5d5', solid: 0, desc: 'bounce pad', force: {x:1,y:2} },     // piattaforme di jump\r\n    // POWERUPS\r\n    { id: 10, colour: '#ddd5d5', solid: 0, desc: 'health' },     \r\n    { id: 11, colour: '#ddd5d5', solid: 0, desc: 'megaHealth' },     \r\n    { id: 12, colour: '#ddd5d5', solid: 0, desc: 'armour' },     \r\n    { id: 13, colour: '#ddd5d5', solid: 0, desc: 'megaArmour' },     // a tempo\r\n    { id: 14, colour: '#ddd5d5', solid: 0, desc: 'quad damage' },    // a tempo  \r\n    { id: 15, colour: '#ddd5d5', solid: 0, desc: 'speed' },          // a tempo\r\n    { id: 15, colour: '#ddd5d5', solid: 0, desc: 'regeneration' },   // a tempo   \r\n    // WEAPONS AMMO\r\n    { id: 23, colour: '#ddd5d5', solid: 0, desc: 'ammo for Machine Gun/Rifle' },\r\n    { id: 24, colour: '#ddd5d5', solid: 0, desc: 'ammo for Shotgun' },     \r\n    { id: 25, colour: '#ddd5d5', solid: 0, desc: 'ammo for Plasma Gun' },     \r\n    { id: 26, colour: '#ddd5d5', solid: 0, desc: 'ammo for ' },     \r\n    { id: 27, colour: '#ddd5d5', solid: 0, desc: 'ammo for Rocket Launcher' },     \r\n    { id: 28, colour: '#ddd5d5', solid: 0, desc: 'ammo for Lightning Gun' },     \r\n    { id: 29, colour: '#ddd5d5', solid: 0, desc: 'ammo for Railgun' },     \r\n    // WEAPONS\r\n    { id: 33, colour: '#ddd5d5', solid: 0, desc: 'Machine Gun' },\r\n    { id: 34, colour: '#ddd5d5', solid: 0, desc: 'Shotgun' },     \r\n    { id: 35, colour: '#ddd5d5', solid: 0, desc: 'Plasma Gun' },     \r\n    { id: 36, colour: '#ddd5d5', solid: 0, desc: 'Grenade Launcher' },     \r\n    { id: 37, colour: '#ddd5d5', solid: 0, desc: 'Rocket Launcher' },     \r\n    { id: 38, colour: '#ddd5d5', solid: 0, desc: 'Lightning Gun' },     \r\n    { id: 39, colour: '#ddd5d5', solid: 0, desc: 'Railgun' }\r\n    \r\n    */\r\n];\r\n\r\nexport class Map {\r\n\r\n    tileSize:          number;\r\n    mapSize:           any;\r\n    camera:            any;\r\n    powerup:           any;\r\n    main:              any;\r\n    c:                 any;\r\n    ctx:               any;\r\n    map:               any;\r\n\r\n    constructor() { }\r\n\r\n    init(main: any){\r\n        this.camera   = main.camera;\r\n        this.main     = main;\r\n        this.c        = main.c;\r\n        this.tileSize = this.c.TILE_SIZE;\r\n        this.powerup  = main.powerup;\r\n        this.ctx      = main.ctx;\r\n        this.map      = demoMap2;\r\n        // dimensioni in pixels\r\n        this.mapSize = {\r\n            h:         (this.map.length * this.tileSize),\r\n            w:         (this.map[0].length * this.tileSize),\r\n        }\r\n        console.log(`Mappa: ${this.mapSize.w} x ${this.mapSize.h} pixel, Righe: ${this.map.length} - Colonne:${this.map[0].length} `);\r\n    }\r\n\r\n    drawBorder(xPos: number, yPos: number, width: number, height: number, thickness = 1) {\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.fillRect(xPos - (thickness), yPos - (thickness), width + (thickness * 2), height + (thickness * 2));\r\n    }\r\n\r\n    render() {\r\n        var onXTile = Math.floor((this.camera.x + (this.camera.w / 2)) / this.tileSize);\r\n        var onYTile = Math.floor((this.camera.y + (this.camera.h / 2)) / this.tileSize);\r\n        this.ctx.beginPath();\r\n\r\n        for (let j = onYTile - 13; j < onYTile + 13; j++) { // sono 24 righe\r\n            for (let l = onXTile - 17; l < onXTile + 17; l++) { // sono 32 colonne\r\n                if (j >= 0 && l >= 0 && j < this.map.length && l < this.map[j].length) {\r\n\r\n                    // if (this.map[j][l] !== 1 || this.map[j][l] !== 3 || this.map[j][l] !== 4) {\r\n                    //     this.drawBorder(l * this.tileSize - this.camera.x, j * this.tileSize - this.camera.y, this.tileSize, this.tileSize);\r\n                    // }\r\n\r\n                    // si renderizza relativamente alla camera !!!\r\n                    this.ctx.fillStyle = this.getColor(this.map[j][l]);\r\n                    this.ctx.fillRect(l * this.tileSize - this.camera.x, j * this.tileSize - this.camera.y, this.tileSize, this.tileSize);\r\n\r\n                    if (this.main.debug) {\r\n                        this.ctx.font = 'bold 8px/1 Arial';\r\n                        this.ctx.fillStyle = '#494242';\r\n                        this.ctx.fillText(j.toString(), l * this.tileSize - this.camera.x + 2, j * this.tileSize - this.camera.y + 10);\r\n                        this.ctx.fillText(l.toString(), l * this.tileSize - this.camera.x + 2, j * this.tileSize - this.camera.y + 20);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getColor(tile: any){\r\n        let color;\r\n        switch (tile) {\r\n            case 0:  color = 'LightSteelBlue';break;    // empty\r\n            case 1:  color = 'SlateGray';break;         // solid\r\n            case 3:  color = 'red';break;               // lava\r\n            case 4:  color = 'green';break;             // toxic water\r\n            default: color = 'LightSteelBlue';break; \r\n        }\r\n        return color;\r\n    }\r\n\r\n    pixelToMapPos(pos) {\r\n        return {\r\n          x: Math.floor(pos.x / this.tileSize),\r\n          y: Math.floor(pos.y / this.tileSize)\r\n        };\r\n      }\r\n    \r\n      mapToPixelPos(mapPos) {\r\n        return {\r\n          x: mapPos.x * this.tileSize,\r\n          y: mapPos.y * this.tileSize\r\n        };\r\n      }\r\n    \r\n\r\n\r\n    loadSpawnPointsAndPowerUps() {\r\n        let output = {};\r\n        output.spawn =[]; \r\n        output.powerup =[];\r\n        output.waypoints =[];\r\n        for (let j = 0; j < this.map.length; j++) {\r\n            for (let l = 0; l < this.map[j].length; l++) {\r\n                if (j >= 0 && l >= 0 && j < this.map.length && l < this.map[j].length) {\r\n                    if (this.map[j][l] == 2) {\r\n                        output.spawn.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5\r\n                        });\r\n                    }\r\n\r\n                    // POWERUPS\r\n                    if (this.map[j][l] == 10) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'health'\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 11) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'megaHealth'\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 12) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'armour'\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 13) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'megaArmour'\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 14) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'quad'\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 15) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'speed'\r\n                        });\r\n                    }\r\n\r\n                    /* --------------------- WEAPONS --------------------- */\r\n                    if (this.map[j][l] == 34) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'weaponShotgun',\r\n                            for:'Shotgun',\r\n                            amount:25\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 35) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'weaponPlasma',\r\n                            for:'Plasma',\r\n                            amount:25\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 37) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'weaponRocket',\r\n                            for:'Rocket',\r\n                            amount:10\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 39) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'weaponRailgun',\r\n                            for:'Railgun',\r\n                            amount:5\r\n                        });\r\n                    }\r\n\r\n\r\n                    /* --------------------- AMMO --------------------- */\r\n                    if (this.map[j][l] == 23) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'ammoRifle',\r\n                            for:'Rifle'\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 24) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'ammoShotgun',\r\n                            for:'Shotgun',\r\n                            amount:25\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 25) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'ammoPlasma',\r\n                            for:'Plasma',\r\n                            amount:25\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 27) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'ammoRocket',\r\n                            for:'Rocket',\r\n                            amount:10\r\n                        });\r\n                    }\r\n                    if (this.map[j][l] == 29) {\r\n                        output.powerup.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'ammoRailgun',\r\n                            for:'Railgun',\r\n                            amount:5\r\n                        });\r\n                    }\r\n\r\n                    // WAYPOINTS\r\n                    if (this.map[j][l] == 40) {\r\n                        output.waypoints.push({\r\n                            x: l * this.tileSize - this.camera.x + 12.5,\r\n                            y: j * this.tileSize - this.camera.y + 12.5,\r\n                            type: 'waypoint'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // console.log(output);\r\n        return output\r\n    }\r\n\r\n}","import { Helper } from '../helper';\r\n\r\nexport class BulletHandler {\r\n\r\n    list: any[] = [];\r\n    pool: any[] = []\r\n\r\n    main:       any;\r\n    c:          any;\r\n    player:     any;\r\n    enemy:      any;\r\n    map:        any;\r\n    particelle: any;\r\n    blood:      any;\r\n\r\n\r\n    constructor() { }\r\n\r\n    init(main: any) {\r\n        this.list.length = 0;\r\n        this.main        = main;\r\n        this.c           = main.c;\r\n        this.player      = main.player;\r\n        this.enemy       = main.enemy;\r\n        this.particelle  = main.particelle;\r\n        this.map         = main.currentMap;\r\n        this.blood       = main.blood;\r\n    }\r\n\r\n    myCheckCollision(shot: any, map: any) {\r\n        if (shot.x - shot.old_x > 0 && map[Math.floor(shot.y / this.c.TILE_SIZE)][Math.floor((shot.x + this.c.BULLET_RADIUS) / this.c.TILE_SIZE)] == 1) {\r\n            shot.x = shot.old_x;\r\n            return true;\r\n        }\r\n        if (shot.x - shot.old_x > 0 && map[Math.floor(shot.y / this.c.TILE_SIZE)][Math.floor((shot.x - this.c.BULLET_RADIUS) / this.c.TILE_SIZE)] == 1) {\r\n            shot.x = shot.old_x;\r\n            return true;\r\n        }\r\n        if (shot.y + shot.old_y > 0 && map[Math.floor((shot.y + this.c.BULLET_RADIUS) / this.c.TILE_SIZE)][Math.floor(shot.x / this.c.TILE_SIZE)] == 1) {\r\n            shot.y = shot.old_y;\r\n            return true;\r\n        }\r\n        if (shot.y + shot.old_y < 0 && map[Math.floor((shot.y - this.c.BULLET_RADIUS) / this.c.TILE_SIZE)][Math.floor(shot.x / this.c.TILE_SIZE)] == 1) {\r\n            shot.y = shot.old_y;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    doExplosion(shot:any){\r\n        let magnitude = 3;\r\n        // let type =Object.assign(shot.type,{r:this.c.TILE_SIZE*1.5})\r\n        // si crea uno shot che verrà analizzato nel prossimo update() avente il raggio dell'esplosione\r\n        // this.create( shot.x, shot.y, 0, 0, shot.firedBy, shot.index, 50, type)\r\n        for (let b = 0; b < 50; b++) {\r\n            //this.main.particelle.create(shot.x, shot.y, Math.random() * magnitude - magnitude, Math.random() * magnitude - magnitude, Helper.randf(this.c.DEBRIS_RADIUS, 20), Helper.randomElementInArray(this.c.FIRE_EXPLOSION))\r\n            this.main.particelle.create(shot.x, shot.y, Math.random() * magnitude - 1, Math.random() * magnitude - 1, Helper.randf(this.c.DEBRIS_RADIUS, 20), Helper.randomElementInArray(this.c.FIRE_EXPLOSION));\r\n        }\r\n    }\r\n\r\n    calculateHealth(actor:any, damage:number){\r\n        if(actor.ap>0){\r\n            actor.ap -= damage;\r\n            let what = actor.ap;\r\n            if(what<0){\r\n                actor.hp += what;\r\n            }\r\n        }else{\r\n            actor.ap = 0;\r\n            actor.hp -= damage;\r\n        }\r\n    }\r\n\r\n    update(dt: number,timestamp:number) {\r\n        let shot, i;\r\n        for (i = this.list.length - 1; i >= 0; i--) {\r\n            shot = this.list[i];\r\n            shot.old_x = shot.x;\r\n            shot.old_y = shot.y;\r\n            shot.x += shot.vX;\r\n            shot.y += shot.vY;\r\n\r\n            shot.angleForDinamicRadius += 2*Math.PI/30;  // animazione del raggio dinamico di 36° a frame\r\n\r\n            // collisione con i muri\r\n            if (this.myCheckCollision(shot, this.map.map)) {\r\n                // TODO: la velocità deve invertire su un solo asse quella del bullet...\r\n                this.main.particelle.create(shot.x, shot.y, Math.random() * shot.vX / 3.5, Math.random() * shot.vY / 3.5, this.c.DEBRIS_RADIUS)\r\n                if(shot.explode){\r\n                    this.doExplosion(shot);\r\n                }\r\n                this.pool.push(shot);\r\n                this.list.splice(i, 1);\r\n                continue\r\n            }\r\n            \r\n            // bullet sparati da bot a bot (non il player... chiSparaTarget.index!=100 )\r\n            let chiSpara = this.enemy.list[shot.index];\r\n            if (chiSpara) {\r\n                let chiSparaTarget = chiSpara.target || {};\r\n                if (shot.index == chiSpara.index && chiSparaTarget.alive && chiSparaTarget.index!=100 && Helper.circleCollision(shot, chiSparaTarget)) {\r\n                    if(shot.explode){\r\n                        this.doExplosion(shot);\r\n                    }\r\n                    //chiSparaTarget.hp -= shot.damage;\r\n                    this.calculateHealth(chiSparaTarget,shot.damage);\r\n                    this.blood.create(shot.x, shot.y, Math.random() * 4 - 4, Math.random() * 4 - 4, this.c.BLOOD_RADIUS) // crea il sangue\r\n                    this.pool.push(shot);\r\n                    this.list.splice(i, 1);\r\n                    if (chiSparaTarget.hp <= 0) {\r\n                        chiSparaTarget.alive = false;\r\n                        chiSparaTarget.numberOfDeaths++;\r\n                        for (let b = 0; b < 36; b++) {\r\n                            this.blood.create(shot.x, shot.y, Math.random() * 4 - 2, Math.random() * 4 - 2, this.c.BLOOD_RADIUS) // crea il sangue\r\n                        }\r\n                        this.enemy.list[shot.index].kills++;    // si aumenta lo score del bot che ha sparato il proiettile\r\n                        console.log(`BOT ${chiSpara.index} killed BOT ${chiSparaTarget.index}`);\r\n                        setTimeout(() => {\r\n                            this.enemy.respawn(chiSparaTarget);\r\n                        }, this.c.GAME_RESPAWN_TIME);\r\n                    }\r\n                    this.pool.push(shot);\r\n                    this.list.splice(i, 1);\r\n                    continue\r\n                }\r\n            }\r\n\r\n\r\n            // si guarda se i proiettili di qualche nemico impattano il player\r\n            if (shot.firedBy == 'enemy' && this.player.alive && Helper.circleCollision(shot, this.player)) {\r\n                if(shot.explode){\r\n                    this.doExplosion(shot);\r\n                }\r\n                if(!this.player.godMode){\r\n                    //this.player.hp -= shot.damage;\r\n                    this.calculateHealth(this.player,shot.damage);\r\n                }\r\n                this.blood.create(shot.x, shot.y, Math.random() * 2 - 2, Math.random() * 2 - 2, this.c.BLOOD_RADIUS) // crea il sangue\r\n                this.pool.push(shot);\r\n                this.list.splice(i, 1);\r\n                if (this.player.hp <= 0) {\r\n                    this.player.alive = false;\r\n                    this.player.numberOfDeaths++;\r\n                    for (let b = 0; b < 36; b++) {\r\n                        this.blood.create(shot.x, shot.y, Math.random() * 4 - 2, Math.random() * 4 - 2, this.c.BLOOD_RADIUS) // crea il sangue\r\n                    }\r\n                    this.enemy.list[shot.index].kills++;    // si aumenta lo score del bot che ha sparato il proiettile\r\n                    let currentActorInCamera = this.enemy.list[shot.index];\r\n                    this.main.camera.setCurrentPlayer(currentActorInCamera);\r\n                    this.main.camera.adjustCamera(currentActorInCamera);\r\n                    // setTimeout(() =>this.player.respawn(), this.c.GAME_RESPAWN_TIME);\r\n                    console.log(`BOT ${shot.index} killed Player ${this.player.index}.`);\r\n                }\r\n                this.pool.push(shot);\r\n                this.list.splice(i, 1);\r\n                continue\r\n            }\r\n\r\n            // si guarda se i proiettili del player impattano qualche nemico\r\n            for (let i = this.enemy.list.length - 1; i >= 0; i--) {\r\n                const bot = this.enemy.list[i];\r\n                if (shot.firedBy == 'player' && bot.alive && Helper.circleCollision(shot, bot)) {\r\n                    if(shot.explode){\r\n                        this.doExplosion(shot);\r\n                    }\r\n                    //bot.hp -= shot.damage;\r\n                    this.calculateHealth(bot,shot.damage);\r\n                    this.blood.create(shot.x, shot.y, Math.random() * 2 - 2, Math.random() * 2 - 2, this.c.BLOOD_RADIUS) // crea il sangue\r\n                    if (bot.hp <= 0) {\r\n                        bot.alive = false;\r\n                        this.player.kills++;\r\n                        bot.numberOfDeaths++;\r\n                        for (let b = 0; b < 36; b++) {\r\n                            this.blood.create(shot.x, shot.y, Math.random() * 4 - 2, Math.random() * 4 - 2, this.c.BLOOD_RADIUS) // crea il sangue\r\n                        }\r\n                        console.log(`PLayer killed BOT ${bot.index}.`);\r\n                        setTimeout(() => {\r\n                            this.enemy.respawn(bot);\r\n                        }, this.c.GAME_RESPAWN_TIME);\r\n                        this.main.fragMessage = `You fragged ${bot.name} ${this.calculateRanking()} place with ${this.player.kills}`;\r\n                    }\r\n                    this.pool.push(shot);\r\n                    this.list.splice(i, 1);\r\n                    continue\r\n                }\r\n            }\r\n\r\n            // diverse visualizzazioni proiettili\r\n            if(shot.type.name=='Plasma'){\r\n                shot.r =1 + Math.abs(Math.sin(shot.angleForDinamicRadius))*5;\r\n            }\r\n            if(shot.type.name=='Railgun'){\r\n                let amplitude = 8; // in px\r\n                let beta = timestamp + Math.PI / 2;\r\n                let p1:any ={};\r\n                let p2:any ={};\r\n                p1.x = shot.x + Math.cos(beta) * amplitude;\r\n                p1.y = shot.y + Math.sin(beta) * amplitude;\r\n                p2.x = shot.x + Math.cos(beta) * amplitude;\r\n                p2.y = shot.y + Math.sin(beta) * amplitude;\r\n                this.main.particelle.create(p1.x, p1.y, 0, 0, 3, shot.color);\r\n                this.main.particelle.create(p2.x, p2.y, 0, 0, 3, shot.color);\r\n            }\r\n            if (shot.type.name == 'Rocket') {\r\n                let amplitude = 2; // in px\r\n                let beta = timestamp + Math.PI / 2;\r\n                for (let i = 0; i < 2; i++) {\r\n                    let scia: any = {};\r\n                    scia.x = shot.x + Math.cos(beta) * amplitude;\r\n                    scia.y = shot.y + Math.sin(beta) * amplitude;\r\n                    this.main.particelle.create(scia.x, scia.y, 0, 0, 3, Helper.randomElementInArray(this.c.FIRE_EXPLOSION));\r\n                }\r\n            }\r\n            // decremento del proiettile\r\n            shot.ttl -= dt;\r\n            if (shot.ttl <= 0) {\r\n                this.pool.push(shot);\r\n                this.list.splice(i, 1);\r\n                continue\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateRanking(){\r\n        let index;\r\n        this.main.actors = this.main.actors.sort((obj1:any, obj2:any) =>obj2.kills - obj1.kills);\r\n        for (let i = 0; i < this.main.actors.length; i++) {\r\n            const element = this.main.actors[i];\r\n            if(element.index==100){\r\n                index=i;\r\n                break;\r\n            }\r\n        }\r\n        let output;\r\n        switch (index) {\r\n            case 0: output ='1st'; break;\r\n            case 1: output ='2nd'; break;\r\n            case 2: output ='3rd'; break;\r\n            case 3: output ='4th'; break;\r\n            case 4: output ='5th'; break;\r\n            case 5: output ='6th'; break;\r\n            case 6: output ='7th'; break;\r\n            case 7: output ='0th'; break;\r\n            default:break;\r\n        }\r\n        return output;\r\n    }\r\n\r\n    render() {\r\n        for (let j = this.list.length - 1; j >= 0; j--) {\r\n            const shot = this.list[j];\r\n            let x = shot.x - this.main.camera.x;\r\n            let y = shot.y - this.main.camera.y;\r\n            this.main.ctx.beginPath();\r\n            this.main.ctx.arc(x, y, shot.r, 0, 6.2832);\r\n            if(shot.type.name=='Flamer'){\r\n                this.main.ctx.fillStyle = Helper.randomElementInArray(this.c.FIRE_EXPLOSION); \r\n            } else{\r\n                this.main.ctx.fillStyle = shot.color; // 'rgba(0,0,0,0.66)';\r\n            }\r\n            this.main.ctx.fill();\r\n            this.main.ctx.closePath()\r\n        }\r\n    }\r\n\r\n    create(x: number, y: number, vX: number, vY: number, firedBy: string, index: number, damage:number, type?: any) {\r\n        let shot = /* this.pool.length > 0 ? this.pool.pop() : */ {};\r\n        shot.old_x   = x;\r\n        shot.x       = x;\r\n        shot.old_y   = y;\r\n        shot.y       = y;\r\n        shot.index   = index;   // è l'id del \r\n        shot.firedBy = firedBy; // indica da chi è sparato il colpo ( player, enemy )\r\n        shot.type    = type;\r\n        if(shot.type.name=='Plasma'){\r\n            shot.angleForDinamicRadius = 0;\r\n        }\r\n        shot.vX  = vX * type.speed + Math.random() * type.spread * 2 - type.spread;\r\n        shot.vY  = vY  * type.speed + Math.random() * type.spread * 2 - type.spread;\r\n        \r\n        shot.r       = type.r;\r\n        shot.ttl     = type.ttl;\r\n        shot.color   = type.color;\r\n        shot.damage  = damage ? damage * type.damage: type.damage;\r\n        shot.explode = type.explode;\r\n        this.list.push(shot);\r\n    }\r\n\r\n}\r\n\r\n","import {Helper} from'../helper';\r\n\r\nexport class Particelle {\r\n    list: any[];\r\n    pool: any[];\r\n    main: any;\r\n    c:    any;\r\n\r\n    constructor () {\r\n       \r\n    }\r\n\r\n    init(main:any){\r\n        this.list = [];\r\n        this.pool = [];\r\n        this.main = main;\r\n        this.c    = main.c;\r\n    }\r\n\r\n    /**\r\n     * Invocata con:\r\n     * this.debrisHandler.create(shot.x, shot.y, Math.random() * 2 - 1, Math.random() * 2 - 1, 3)\r\n     * @param {*} x coordinata x del detrito\r\n     * @param {*} y coordinata y del detrito\r\n     * @param {*} vX    veocità x\r\n     * @param {*} vY    velocità y\r\n     * @param {*} r raggio del detrito (default =3)\r\n     * @memberof Particelle\r\n     */\r\n    create (x:number, y:number, vX:number, vY:number, r: any=3, color?:string) {\r\n        var obj = this.pool.length > 0 ? this.pool.pop() : new Object();\r\n        obj.x  = x;\r\n        obj.y  = y;\r\n        obj.vX = vX;\r\n        obj.vY = vY;\r\n        obj.r  = r;\r\n        obj.color = color;\r\n        this.list.push(obj)\r\n    };\r\n\r\n    update (dt:number, timestamp:number) {\r\n        if (this.list.length > 0) {\r\n            var obj;\r\n            for (var i = this.list.length - 1; i >= 0; i--) {\r\n                obj = this.list[i];\r\n                obj.x += - obj.vX; // si inverte il segno\r\n                obj.y += - obj.vY;   // si inverte il segno\r\n                obj.vX *= 0.97;\r\n                obj.vY *= 0.97;\r\n                obj.r -= 0.1;\r\n                if (obj.r <= 0) {\r\n                    this.pool.push(obj);\r\n                    this.list.splice(i, 1);\r\n                    continue\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        for (var i = this.list.length - 1; i >= 0; i--) {\r\n            var detrito = this.list[i];\r\n            let x = detrito.x - this.main.camera.x;\r\n            let y = detrito.y - this.main.camera.y;\r\n            this.main.ctx.beginPath();\r\n                    this.main.ctx.arc(x, y, detrito.r, 0, 6.2832);\r\n                    this.main.ctx.fillStyle =  detrito.color || Helper.randomElementInArray(this.c.DEBRIS_COLOR);\r\n                    this.main.ctx.fill();\r\n                    this.main.ctx.closePath()\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","import {Helper} from'../helper';\r\n\r\nexport class Blood {\r\n    list: any[];\r\n    pool: any[];\r\n    main: any;\r\n    c:    any;\r\n\r\n    constructor () {\r\n    }\r\n\r\n    init(main:any){\r\n        this.list = [];\r\n        this.pool = [];\r\n        this.main = main;\r\n        this.c    = main.c; \r\n    }\r\n\r\n    update (dt: number, timestamp:number) {\r\n        if (this.list.length > 0) {\r\n            var obj;\r\n            for (var i = this.list.length - 1; i >= 0; i--) {\r\n                obj = this.list[i];\r\n                obj.x += -obj.vX;\r\n                obj.y += -obj.vY;\r\n                obj.vX *= 0.96;\r\n                obj.vY *= 0.96;\r\n                obj.radius -= 0.1;\r\n                if (obj.radius <= 0) {\r\n                    this.pool.push(obj);\r\n                    this.list.splice(i, 1);\r\n                    continue\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Invocata con:\r\n     *  this.blood(shot.x, shot.y, shot.vX * 0.4, shot.vY * 0.4, 4) // crea il sangue\r\n     * @param {*} x coordinata x della particella di sangue\r\n     * @param {*} y coordinata y della particella di sangue\r\n     * @param {*} vX    veocità x\r\n     * @param {*} vY    velocità y\r\n     * @param {*} radius raggio della particella di sangue (default =3)\r\n     */\r\n    create (x:number, y:number, vX:number, vY:number, radius: any=3) {\r\n        var obj = this.pool.length > 0 ? this.pool.pop() : new Object();\r\n        obj.x  = x;\r\n        obj.y  = y;\r\n        obj.vX = vX;\r\n        obj.vY = vY;\r\n        obj.radius = radius;\r\n        this.list.push(obj)\r\n    };\r\n\r\n    render(){\r\n        for (var i = this.list.length - 1; i >= 0; i--) {\r\n            var sangue = this.list[i];\r\n            let x = sangue.x - this.main.camera.x;\r\n            let y = sangue.y - this.main.camera.y;\r\n            this.main.ctx.beginPath();\r\n                    this.main.ctx.arc(x, y, sangue.radius, 0, 6.2832);\r\n                    this.main.ctx.fillStyle = Helper.randomElementInArray(this.c.BLOOD_COLOUR) ;\r\n                    this.main.ctx.fill();\r\n                    this.main.ctx.closePath()\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","import { Helper } from '../helper';\r\n\r\nexport class Waypoints {\r\n\r\n    list: any[] = [];\r\n    pool: any[] = [];\r\n\r\n    player:     any;\r\n    bots:       any;\r\n    ctx:        any;\r\n    main:       any;\r\n    c:          any;\r\n\r\n    constructor() { \r\n    }\r\n\r\n    init(main: any){\r\n        this.list = [];\r\n        this.main       = main;\r\n        this.c          = main.c;\r\n        this.player     = main.player;\r\n        this.bots       = main.enemy;\r\n        this.ctx        = main.ctx;\r\n    }\r\n\r\n    // ogni waypoint ha un riferimento di ogni bot per essere attraverasabile\r\n    linkToActors() {\r\n        this.list.forEach(e => {\r\n            this.bots.list.forEach((bot: any) => {\r\n                e[bot.index] = { visible: true, reloadRate: 0 };\r\n            });\r\n        });\r\n    }\r\n\r\n    create(x: number, y: number, index:number) {\r\n        let waypoint        = this.pool.length > 0 ? this.pool.pop(): new Object();\r\n        waypoint.type       = 'waypoint';\r\n        waypoint.index      = index;\r\n        waypoint.x          = x;\r\n        waypoint.y          = y;\r\n        waypoint.reloadRate = 0;\r\n        waypoint.spawnTime  = this.c.WAYPOINTS_TIMING;   // tempo necessario per essere nuovamente attraverabili da ogni bot\r\n        waypoint.r          = 3;  \r\n        waypoint.color      = 'orange';\r\n        this.list.push(waypoint);\r\n    };\r\n\r\n\r\n    update(dt:number, timestamp:number) {\r\n        for (var i = this.list.length - 1; i >= 0; i--) {\r\n            var waypoint = this.list[i];\r\n            \r\n            // si guarda se i waypoint entrano in contatto con qualche nemico\r\n            for (let i = this.bots.list.length - 1; i >= 0; i--) {\r\n                const bot = this.bots.list[i];\r\n                if (waypoint[bot.index].visible && Helper.circleCollision(waypoint, bot)) {\r\n                    waypoint[bot.index].visible = false;\r\n                }\r\n            }\r\n\r\n            // contatori di visibilità\r\n            for (let a = 0; a < this.bots.list.length; a++) {\r\n                const actor = this.bots.list[a];\r\n                if (!waypoint[actor.index].visible) {\r\n                    waypoint[actor.index].reloadRate+= dt;  // si inizia a contare se non visibile\r\n                }\r\n            }\r\n\r\n            // RESPAWN\r\n            for (let a = 0; a < this.bots.list.length; a++) {\r\n                const actor = this.bots.list[a];\r\n                if (waypoint[actor.index].reloadRate > waypoint.spawnTime) {\t// numero di cicli oltre il quale è nuovamente visibile\r\n                    waypoint[actor.index].visible = true;\r\n                    waypoint[actor.index].reloadRate = 0;\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.main.debug) {\r\n            for (let i = this.list.length - 1; i >= 0; i--) {\r\n                let waypoint = this.list[i];\r\n                //if (waypoint.visible) {\r\n                // centro pulsante\r\n                let x = waypoint.x - this.main.camera.x;\r\n                let y = waypoint.y - this.main.camera.y;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, waypoint.r, 0, 6.2832);\r\n                this.ctx.fillStyle = waypoint.color;\r\n                this.ctx.fill();\r\n                this.ctx.closePath()\r\n\r\n                this.ctx.font = 'bold 8px/1 Arial';\r\n                this.ctx.fillStyle = 'black';\r\n                this.ctx.fillText(waypoint.index.toString(), waypoint.x - this.main.camera.x - 6, waypoint.y - this.main.camera.y - 12);\r\n                //}\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\n * Represents a single instance of EasyStar.\n * A path that is in the queue to eventually be found.\n */\nmodule.exports = function() {\n    this.pointsToAvoid = {};\n    this.startX;\n    this.callback;\n    this.startY;\n    this.endX;\n    this.endY;\n    this.nodeHash = {};\n    this.openList;\n};","/**\n* A simple Node that represents a single tile on the grid.\n* @param {Object} parent The parent node.\n* @param {Number} x The x position on the grid.\n* @param {Number} y The y position on the grid.\n* @param {Number} costSoFar How far this node is in moves*cost from the start.\n* @param {Number} simpleDistanceToTarget Manhatten distance to the end point.\n**/\nmodule.exports = function(parent, x, y, costSoFar, simpleDistanceToTarget) {\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    this.costSoFar = costSoFar;\n    this.simpleDistanceToTarget = simpleDistanceToTarget;\n\n    /**\n    * @return {Number} Best guess distance of a cost using this node.\n    **/\n    this.bestGuessDistance = function() {\n        return this.costSoFar + this.simpleDistanceToTarget;\n    }\n};","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","/**\n*   EasyStar.js\n*   github.com/prettymuchbryce/EasyStarJS\n*   Licensed under the MIT license.\n*\n*   Implementation By Bryce Neal (@prettymuchbryce)\n**/\n\nvar EasyStar = {}\nvar Instance = require('./instance');\nvar Node = require('./node');\nvar Heap = require('heap');\n\nconst CLOSED_LIST = 0;\nconst OPEN_LIST = 1;\n\nmodule.exports = EasyStar;\n\nvar nextInstanceId = 1;\n\nEasyStar.js = function() {\n    var STRAIGHT_COST = 1.0;\n    var DIAGONAL_COST = 1.4;\n    var syncEnabled = false;\n    var pointsToAvoid = {};\n    var collisionGrid;\n    var costMap = {};\n    var pointsToCost = {};\n    var directionalConditions = {};\n    var allowCornerCutting = true;\n    var iterationsSoFar;\n    var instances = {};\n    var instanceQueue = [];\n    var iterationsPerCalculation = Number.MAX_VALUE;\n    var acceptableTiles;\n    var diagonalsEnabled = false;\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array|Number} tiles An array of numbers that represent\n    * which tiles in your grid should be considered\n    * acceptable, or \"walkable\".\n    **/\n    this.setAcceptableTiles = function(tiles) {\n        if (tiles instanceof Array) {\n            // Array\n            acceptableTiles = tiles;\n        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {\n            // Number\n            acceptableTiles = [tiles];\n        }\n    };\n\n    /**\n    * Enables sync mode for this EasyStar instance..\n    * if you're into that sort of thing.\n    **/\n    this.enableSync = function() {\n        syncEnabled = true;\n    };\n\n    /**\n    * Disables sync mode for this EasyStar instance.\n    **/\n    this.disableSync = function() {\n        syncEnabled = false;\n    };\n\n    /**\n     * Enable diagonal pathfinding.\n     */\n    this.enableDiagonals = function() {\n        diagonalsEnabled = true;\n    }\n\n    /**\n     * Disable diagonal pathfinding.\n     */\n    this.disableDiagonals = function() {\n        diagonalsEnabled = false;\n    }\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array} grid The collision grid that this EasyStar instance will read from.\n    * This should be a 2D Array of Numbers.\n    **/\n    this.setGrid = function(grid) {\n        collisionGrid = grid;\n\n        //Setup cost map\n        for (var y = 0; y < collisionGrid.length; y++) {\n            for (var x = 0; x < collisionGrid[0].length; x++) {\n                if (!costMap[collisionGrid[y][x]]) {\n                    costMap[collisionGrid[y][x]] = 1\n                }\n            }\n        }\n    };\n\n    /**\n    * Sets the tile cost for a particular tile type.\n    *\n    * @param {Number} The tile type to set the cost for.\n    * @param {Number} The multiplicative cost associated with the given tile.\n    **/\n    this.setTileCost = function(tileType, cost) {\n        costMap[tileType] = cost;\n    };\n\n    /**\n    * Sets the an additional cost for a particular point.\n    * Overrides the cost from setTileCost.\n    *\n    * @param {Number} x The x value of the point to cost.\n    * @param {Number} y The y value of the point to cost.\n    * @param {Number} The multiplicative cost associated with the given point.\n    **/\n    this.setAdditionalPointCost = function(x, y, cost) {\n        if (pointsToCost[y] === undefined) {\n            pointsToCost[y] = {};\n        }\n        pointsToCost[y][x] = cost;\n    };\n\n    /**\n    * Remove the additional cost for a particular point.\n    *\n    * @param {Number} x The x value of the point to stop costing.\n    * @param {Number} y The y value of the point to stop costing.\n    **/\n    this.removeAdditionalPointCost = function(x, y) {\n        if (pointsToCost[y] !== undefined) {\n            delete pointsToCost[y][x];\n        }\n    }\n\n    /**\n    * Remove all additional point costs.\n    **/\n    this.removeAllAdditionalPointCosts = function() {\n        pointsToCost = {};\n    }\n\n    /**\n    * Sets a directional condition on a tile\n    *\n    * @param {Number} x The x value of the point.\n    * @param {Number} y The y value of the point.\n    * @param {Array.<String>} allowedDirections A list of all the allowed directions that can access\n    * the tile.\n    **/\n    this.setDirectionalCondition = function(x, y, allowedDirections) {\n        if (directionalConditions[y] === undefined) {\n            directionalConditions[y] = {};\n        }\n        directionalConditions[y][x] = allowedDirections;\n    };\n\n    /**\n    * Remove all directional conditions\n    **/\n    this.removeAllDirectionalConditions = function() {\n        directionalConditions = {};\n    };\n\n    /**\n    * Sets the number of search iterations per calculation.\n    * A lower number provides a slower result, but more practical if you\n    * have a large tile-map and don't want to block your thread while\n    * finding a path.\n    *\n    * @param {Number} iterations The number of searches to prefrom per calculate() call.\n    **/\n    this.setIterationsPerCalculation = function(iterations) {\n        iterationsPerCalculation = iterations;\n    };\n\n    /**\n    * Avoid a particular point on the grid,\n    * regardless of whether or not it is an acceptable tile.\n    *\n    * @param {Number} x The x value of the point to avoid.\n    * @param {Number} y The y value of the point to avoid.\n    **/\n    this.avoidAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] === undefined) {\n            pointsToAvoid[y] = {};\n        }\n        pointsToAvoid[y][x] = 1;\n    };\n\n    /**\n    * Stop avoiding a particular point on the grid.\n    *\n    * @param {Number} x The x value of the point to stop avoiding.\n    * @param {Number} y The y value of the point to stop avoiding.\n    **/\n    this.stopAvoidingAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] !== undefined) {\n            delete pointsToAvoid[y][x];\n        }\n    };\n\n    /**\n    * Enables corner cutting in diagonal movement.\n    **/\n    this.enableCornerCutting = function() {\n        allowCornerCutting = true;\n    };\n\n    /**\n    * Disables corner cutting in diagonal movement.\n    **/\n    this.disableCornerCutting = function() {\n        allowCornerCutting = false;\n    };\n\n    /**\n    * Stop avoiding all additional points on the grid.\n    **/\n    this.stopAvoidingAllAdditionalPoints = function() {\n        pointsToAvoid = {};\n    };\n\n    /**\n    * Find a path.\n    *\n    * @param {Number} startX The X position of the starting point.\n    * @param {Number} startY The Y position of the starting point.\n    * @param {Number} endX The X position of the ending point.\n    * @param {Number} endY The Y position of the ending point.\n    * @param {Function} callback A function that is called when your path\n    * is found, or no path is found.\n    * @return {Number} A numeric, non-zero value which identifies the created instance. This value can be passed to cancelPath to cancel the path calculation.\n    *\n    **/\n    this.findPath = function(startX, startY, endX, endY, callback) {\n        // Wraps the callback for sync vs async logic\n        var callbackWrapper = function(result) {\n            if (syncEnabled) {\n                callback(result);\n            } else {\n                setTimeout(function() {\n                    callback(result);\n                });\n            }\n        }\n\n        // No acceptable tiles were set\n        if (acceptableTiles === undefined) {\n            throw new Error(\"You can't set a path without first calling setAcceptableTiles() on EasyStar.\");\n        }\n        // No grid was set\n        if (collisionGrid === undefined) {\n            throw new Error(\"You can't set a path without first calling setGrid() on EasyStar.\");\n        }\n\n        // Start or endpoint outside of scope.\n        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 ||\n        startX > collisionGrid[0].length-1 || startY > collisionGrid.length-1 ||\n        endX > collisionGrid[0].length-1 || endY > collisionGrid.length-1) {\n            throw new Error(\"Your start or end point is outside the scope of your grid.\");\n        }\n\n        // Start and end are the same tile.\n        if (startX===endX && startY===endY) {\n            callbackWrapper([]);\n            return;\n        }\n\n        // End point is not an acceptable tile.\n        var endTile = collisionGrid[endY][endX];\n        var isAcceptable = false;\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (endTile === acceptableTiles[i]) {\n                isAcceptable = true;\n                break;\n            }\n        }\n\n        if (isAcceptable === false) {\n            callbackWrapper(null);\n            return;\n        }\n\n        // Create the instance\n        var instance = new Instance();\n        instance.openList = new Heap(function(nodeA, nodeB) {\n            return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();\n        });\n        instance.isDoneCalculating = false;\n        instance.nodeHash = {};\n        instance.startX = startX;\n        instance.startY = startY;\n        instance.endX = endX;\n        instance.endY = endY;\n        instance.callback = callbackWrapper;\n\n        instance.openList.push(coordinateToNode(instance, instance.startX,\n            instance.startY, null, STRAIGHT_COST));\n\n        var instanceId = nextInstanceId ++;\n        instances[instanceId] = instance;\n        instanceQueue.push(instanceId);\n        return instanceId;\n    };\n\n    /**\n     * Cancel a path calculation.\n     *\n     * @param {Number} instanceId The instance ID of the path being calculated\n     * @return {Boolean} True if an instance was found and cancelled.\n     *\n     **/\n    this.cancelPath = function(instanceId) {\n        if (instanceId in instances) {\n            delete instances[instanceId];\n            // No need to remove it from instanceQueue\n            return true;\n        }\n        return false;\n    };\n\n    /**\n    * This method steps through the A* Algorithm in an attempt to\n    * find your path(s). It will search 4-8 tiles (depending on diagonals) for every calculation.\n    * You can change the number of calculations done in a call by using\n    * easystar.setIteratonsPerCalculation().\n    **/\n    this.calculate = function() {\n        if (instanceQueue.length === 0 || collisionGrid === undefined || acceptableTiles === undefined) {\n            return;\n        }\n        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {\n            if (instanceQueue.length === 0) {\n                return;\n            }\n\n            if (syncEnabled) {\n                // If this is a sync instance, we want to make sure that it calculates synchronously.\n                iterationsSoFar = 0;\n            }\n\n            var instanceId = instanceQueue[0];\n            var instance = instances[instanceId];\n            if (typeof instance == 'undefined') {\n                // This instance was cancelled\n                instanceQueue.shift();\n                continue;\n            }\n\n            // Couldn't find a path.\n            if (instance.openList.size() === 0) {\n                instance.callback(null);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            var searchNode = instance.openList.pop();\n\n            // Handles the case where we have found the destination\n            if (instance.endX === searchNode.x && instance.endY === searchNode.y) {\n                var path = [];\n                path.push({x: searchNode.x, y: searchNode.y});\n                var parent = searchNode.parent;\n                while (parent!=null) {\n                    path.push({x: parent.x, y:parent.y});\n                    parent = parent.parent;\n                }\n                path.reverse();\n                var ip = path;\n                instance.callback(ip);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            searchNode.list = CLOSED_LIST;\n\n            if (searchNode.y > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    0, -1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y-1));\n            }\n            if (searchNode.x < collisionGrid[0].length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    1, 0, STRAIGHT_COST * getTileCost(searchNode.x+1, searchNode.y));\n            }\n            if (searchNode.y < collisionGrid.length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    0, 1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y+1));\n            }\n            if (searchNode.x > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    -1, 0, STRAIGHT_COST * getTileCost(searchNode.x-1, searchNode.y));\n            }\n            if (diagonalsEnabled) {\n                if (searchNode.x > 0 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, -1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, 1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y+1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, -1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x > 0 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, 1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y+1));\n                    }\n                }\n            }\n\n        }\n    };\n\n    // Private methods follow\n    var checkAdjacentNode = function(instance, searchNode, x, y, cost) {\n        var adjacentCoordinateX = searchNode.x+x;\n        var adjacentCoordinateY = searchNode.y+y;\n\n        if ((pointsToAvoid[adjacentCoordinateY] === undefined ||\n             pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === undefined) &&\n            isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {\n            var node = coordinateToNode(instance, adjacentCoordinateX,\n                adjacentCoordinateY, searchNode, cost);\n\n            if (node.list === undefined) {\n                node.list = OPEN_LIST;\n                instance.openList.push(node);\n            } else if (searchNode.costSoFar + cost < node.costSoFar) {\n                node.costSoFar = searchNode.costSoFar + cost;\n                node.parent = searchNode;\n                instance.openList.updateItem(node);\n            }\n        }\n    };\n\n    // Helpers\n    var isTileWalkable = function(collisionGrid, acceptableTiles, x, y, sourceNode) {\n        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];\n        if (directionalCondition) {\n            var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y)\n            var directionIncluded = function () {\n                for (var i = 0; i < directionalCondition.length; i++) {\n                    if (directionalCondition[i] === direction) return true\n                }\n                return false\n            }\n            if (!directionIncluded()) return false\n        }\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (collisionGrid[y][x] === acceptableTiles[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * -1, -1 | 0, -1  | 1, -1\n     * -1,  0 | SOURCE | 1,  0\n     * -1,  1 | 0,  1  | 1,  1\n     */\n    var calculateDirection = function (diffX, diffY) {\n        if (diffX === 0 && diffY === -1) return EasyStar.TOP\n        else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT\n        else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT\n        else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT\n        else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM\n        else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT\n        else if (diffX === -1 && diffY === 0) return EasyStar.LEFT\n        else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT\n        throw new Error('These differences are not valid: ' + diffX + ', ' + diffY)\n    };\n\n    var getTileCost = function(x, y) {\n        return (pointsToCost[y] && pointsToCost[y][x]) || costMap[collisionGrid[y][x]]\n    };\n\n    var coordinateToNode = function(instance, x, y, parent, cost) {\n        if (instance.nodeHash[y] !== undefined) {\n            if (instance.nodeHash[y][x] !== undefined) {\n                return instance.nodeHash[y][x];\n            }\n        } else {\n            instance.nodeHash[y] = {};\n        }\n        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);\n        if (parent!==null) {\n            var costSoFar = parent.costSoFar + cost;\n        } else {\n            costSoFar = 0;\n        }\n        var node = new Node(parent,x,y,costSoFar,simpleDistanceToTarget);\n        instance.nodeHash[y][x] = node;\n        return node;\n    };\n\n    var getDistance = function(x1,y1,x2,y2) {\n        if (diagonalsEnabled) {\n            // Octile distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            if (dx < dy) {\n                return DIAGONAL_COST * dx + dy;\n            } else {\n                return DIAGONAL_COST * dy + dx;\n            }\n        } else {\n            // Manhattan distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            return (dx + dy);\n        }\n    };\n}\n\nEasyStar.TOP = 'TOP'\nEasyStar.TOP_RIGHT = 'TOP_RIGHT'\nEasyStar.RIGHT = 'RIGHT'\nEasyStar.BOTTOM_RIGHT = 'BOTTOM_RIGHT'\nEasyStar.BOTTOM = 'BOTTOM'\nEasyStar.BOTTOM_LEFT = 'BOTTOM_LEFT'\nEasyStar.LEFT = 'LEFT'\nEasyStar.TOP_LEFT = 'TOP_LEFT'\n","import { Enemy } from './entities/enemies';\r\nimport { PowerUp } from './entities/powerup';\r\nimport { ControlHandler } from './controller';\r\nimport { Player } from './entities/player';\r\nimport { Config } from './config';\r\nimport { Camera } from './camera';\r\nimport { Map } from './maps';\r\nimport {BulletHandler} from './entities/bullet';\r\nimport { Particelle } from './entities/particelle';\r\nimport { Blood } from './entities/blood';\r\nimport { Waypoints } from './entities/waypoints';\r\n\r\nimport * as EasyStar from 'easystarjs'\r\n\r\nwindow.onload = function () {\r\n    let app = new Game();\r\n    app.loadMenuScreen(app);\r\n};\r\n\r\nexport default class Game {\r\n\r\n    // CANVAS\r\n    canvas:            HTMLCanvasElement;\r\n    ctx:               CanvasRenderingContext2D;\r\n\r\n    lastRender:number;\r\n    fps:number;\r\n\r\n    // GAME ENTITIES\r\n    player:     Player;\r\n    enemy:      Enemy;\r\n    bullet:     BulletHandler;\r\n    camera:     Camera;\r\n    control:    ControlHandler;\r\n    powerup:    PowerUp;\r\n    waypoints:  Waypoints;\r\n    particelle: Particelle;\r\n    blood:      Blood;\r\n    currentMap: Map;\r\n    c:          Config;\r\n    state:             string;\r\n    timeleft:          number;\r\n\r\n    // GAME PARAMETERS\r\n    start:         boolean;     // flags that you want the countdown to start\r\n    stopTime:      number;      // used to hold the stop time\r\n    stop:          boolean;     // flag to indicate that stop time has been reached\r\n    timeTillStop:  number;      // holds the display time\r\n    killsToWin:    number;\r\n    matchDuration: number;\r\n    numberOfBots:  number;\r\n    gameType:      string;           // TODO: sarà in seguito anche Team Deathmatch, Capture the flag, Skirmish\r\n    data:          any;\r\n\r\n    actors:        any[];\r\n\r\n    fragMessage:   string;\r\n    durationfragMessage:   number;\r\n\r\n    // A* PATHFINDING\r\n    easystar:      any;\r\n\r\n    // UI\r\n    fontFamily:        string;\r\n    paused:boolean = false;\r\n    debug:boolean = false;\r\n\r\n    constructor() {\r\n        this.canvas        = <HTMLCanvasElement>document.getElementById('canvas');\r\n        this.canvas.height = 600; // window.innerHeight\r\n        this.canvas.width  = 800; // window.innerWidth\r\n        this.ctx           = this.canvas.getContext(\"2d\");\r\n        this.player        = new Player();  // PLAYER\r\n        this.enemy         = new Enemy();    // ENEMY\r\n        this.bullet        = new BulletHandler();\r\n        this.camera        = new Camera();\r\n        this.control       = new ControlHandler(this);\r\n        this.currentMap    = new Map();\r\n        this.particelle    = new Particelle();\r\n        this.powerup       = new PowerUp();\r\n        this.waypoints     = new Waypoints();\r\n        this.blood         = new Blood();\r\n        this.state         = 'loading';\r\n    }\r\n    \r\n    // fa partire il gameloop\r\n    startGame(gametype:string='deathmatch') {\r\n        this.c                   = new Config();\r\n        this.canvas.height       = this.c.CANVAS_HEIGHT; // window.innerHeight\r\n        this.canvas.width        = this.c.CANVAS_WIDTH; // window.innerWidth\r\n        this.state               = 'game';\r\n        this.start               = true;      // flags that you want the countdown to start\r\n        this.lastRender          = 0;         // ultimo timestamp\r\n        this.fps                 = 0;\r\n        this.stopTime            = 0;         // used to hold the stop time\r\n        this.stop                = false;     // flag to indicate that stop time has been reached\r\n        this.timeTillStop        = 0;         // holds the display time\r\n        this.killsToWin          = this.c.GAME_KILLS_TO_WIN;\r\n        this.matchDuration       = this.c.GAME_MATCH_DURATION;\r\n        this.numberOfBots        = this.c.GAME_BOTS_PER_MATCH;\r\n        this.gameType            = gametype;\r\n        this.canvas.style.cursor = 'crosshair';\r\n        this.fontFamily          = this.c.FONT_FAMILY;\r\n        this.actors              = [];\r\n        this.easystar            = {};\r\n\r\n        this.fragMessage         ='';\r\n        this.durationfragMessage =0;\r\n        \r\n        \r\n        // bots names\r\n        let botsArray = Array(this.numberOfBots).fill(null).map((e,i)=> i);\r\n        \r\n        // init entities\r\n        this.currentMap.init(this);\r\n        this.player.init(this);\r\n        this.camera.init(0, 0, this.c.CANVAS_WIDTH, this.c.CANVAS_HEIGHT, this);\r\n        this.enemy.init(this);\r\n        this.bullet.init(this);\r\n        this.blood.init(this);\r\n        this.particelle.init(this);\r\n        this.powerup.init(this);\r\n        this.waypoints.init(this);\r\n\r\n        // loading spawnPoint + powerups + weapons\r\n        this.data = this.currentMap.loadSpawnPointsAndPowerUps();\r\n\r\n         // POWERUP & WEAPONS\r\n         this.data.powerup\r\n         .map((e:any,i:number)=>{\r\n             e.index=i;\r\n            return e;})  // si mette un indice\r\n         .forEach((e:any, index:number) => {\r\n            this.powerup.create(e.x, e.y, e.type, index); \r\n        });\r\n\r\n         // waypoint\r\n         this.data.waypoints\r\n         .map((e:any,i:number)=>{\r\n             e.index=i;\r\n            return e;})  // si mette un indice\r\n         .forEach((e:any, index:number) => {\r\n            this.waypoints.create(e.x, e.y, index); \r\n        });\r\n\r\n        // si inizializza il player\r\n        this.player.createPlayer();      \r\n        this.actors[0]= this.player;\r\n        \r\n        // si crea i bots\r\n        botsArray.forEach((elem:any, index:number) => {\r\n            let e = this.data.spawn[index];\r\n            let bot = this.enemy.create(e.x,e.y, index, this.defineTeams(index)); // si crea un nemico\r\n            this.actors[this.actors.length]=bot;\r\n        });\r\n\r\n        this.waypoints.linkToActors();\r\n\r\n        this.easystar = new EasyStar.js();\r\n        this.easystar.setGrid(this.currentMap.map);\r\n        // Get the walkable tile indexes\r\n        this.easystar.setAcceptableTiles([0, 2, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 27, 29, 34, 35, 37, 39, 40]);\r\n        this.easystar.enableDiagonals();\r\n        this.easystar.enableCornerCutting();\r\n\r\n        requestAnimationFrame(this.gameLoop.bind(this));\r\n    }\r\n\r\n    defineTeams(index:number){\r\n        if(this.gameType== 'deathmatch'){   // tutti i bot hanno un team diverso...\r\n            return  `team${index+2}`;\r\n        } else {    // per teamDeathMatch e CTF\r\n            if(index<Math.floor(this.c.GAME_BOTS_PER_MATCH/2)+1){\r\n                return  `team2`;\r\n            }else{\r\n                return  `team1`;\r\n            }\r\n        }\r\n    }\r\n\r\n    private gameLoop(timestamp:number): void {\r\n\r\n        this.canvas.style.cursor='crosshair';\r\n        \r\n        let dt = timestamp - this.lastRender;\r\n        this.fps = Math.floor(1000/dt);\r\n\r\n        if(this.start){                                     // do we need to start the timer\r\n            this.stopTime = timestamp + this.matchDuration; // yes the set the stoptime\r\n            this.start = false;                             // clear the start flag\r\n        }else{                                              // waiting for stop\r\n            if(timestamp >= this.stopTime){                 // has stop time been reached?\r\n                this.stop = true;                           // yes the flag to stop\r\n            }\r\n        }\r\n        this.timeTillStop = Math.floor(this.stopTime - timestamp)/1000;      // for display of time till stop\r\n\r\n        if (this.state != 'game') {\r\n            return\r\n        }\r\n\r\n        if(this.fragMessage){\r\n            this.durationfragMessage+= dt;\r\n        }\r\n\r\n        if(this.durationfragMessage> 1500){\r\n            this.fragMessage= '';\r\n            this.durationfragMessage = 0;\r\n        }\r\n\r\n        for (let i = 0; i < this.enemy.list.length; i++) {\r\n            const bot = this.enemy.list[i];\r\n            if (this.player.kills == this.killsToWin || bot.kills == this.killsToWin) {\r\n                this.loadStatsScreen(this);\r\n                return; \r\n            }\r\n        }\r\n\r\n        if(!this.paused){\r\n            this.updateAll(dt, timestamp);\r\n            this.renderAll();\r\n        }\r\n        \r\n        this.lastRender = timestamp;\r\n      \r\n        if (!this.stop) {\r\n            requestAnimationFrame(this.gameLoop.bind(this));\r\n        } else {\r\n            this.loadStatsScreen(this);\r\n            return;\r\n        }\r\n    }\r\n\r\n    updateAll(dt:number, timestamp:number) {\r\n        this.player.update(dt, timestamp);\r\n        this.enemy.update(dt, timestamp);\r\n        this.camera.update(dt, timestamp);\r\n        this.bullet.update(dt, timestamp); \r\n        this.powerup.update(dt, timestamp);\r\n        this.waypoints.update(dt, timestamp);    // waypoints\r\n        this.particelle.update(dt, timestamp);\r\n        this.blood.update(dt, timestamp);\r\n        // particles:esplosioni\r\n    }\r\n\r\n    renderAll(): void {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);  // svuota il canvas\r\n        this.currentMap.render();\r\n        this.player.render();\r\n        this.enemy.render();\r\n        this.bullet.render(); \r\n        this.powerup.render();\r\n        this.waypoints.render();    // waypoints\r\n        this.particelle.render();\r\n        this.blood.render();\r\n        // particles:esplosioni\r\n\r\n        this.renderHUD();   // HUD\r\n    }\r\n\r\n    countDown(){\r\n        let minutes, seconds;\r\n        minutes = Math.floor(this.timeTillStop / 60);\r\n        seconds = Math.floor(this.timeTillStop % 60);\r\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n        return  `${minutes}:${seconds}`;\r\n    }\r\n\r\n    private renderHUD() {\r\n        this.ctx.fillStyle = this.c.HUD_BACKGROUND;\r\n        this.ctx.fillRect(0, 0, this.c.CANVAS_WIDTH, this.c.TILE_SIZE);\r\n        this.ctx.textAlign = 'LEFT';\r\n        this.ctx.font = 'bold 14px/1 Arial';\r\n        this.ctx.fillStyle = '#565454';\r\n        this.ctx.fillText('HP ', 5, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText('AP ', 85, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText('Kills ', 165, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText(this.player.currentWeapon.name, 245, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText('TIME ', 600, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText('FPS ', 710, this.c.TILE_SIZE / 2);\r\n        if (this.player.godMode) {\r\n            this.ctx.fillText('god', 770, this.c.TILE_SIZE / 2);\r\n        }\r\n        this.ctx.font = 'bold 14px/1 Arial';\r\n        this.ctx.fillStyle = 'yellow';\r\n        this.ctx.fillText(this.player.hp.toString(), 30, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText(this.player.ap.toString(), 110, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText(this.player.kills.toString(), 200, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText(this.player.currentWeapon.shotNumber.toString(), 310, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText(this.countDown(), 640, this.c.TILE_SIZE / 2);\r\n        this.ctx.fillText(this.fps.toString(), 750, this.c.TILE_SIZE / 2);\r\n        \r\n        // RESPAWN MESSAGE\r\n        if (!this.player.alive) {\r\n            this.ctx.fillStyle = '#565454';\r\n            this.ctx.font = 'bold 28px/1 Arial';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText(`Respawn in ${Math.ceil((this.c.GAME_RESPAWN_TIME - this.player.respawnTime) / 1000).toString()}`, 400, 120);\r\n        }\r\n\r\n        // FRAG MESSAGE\r\n        if (this.fragMessage) {\r\n            this.ctx.fillStyle = '#565454';\r\n            this.ctx.font = 'bold 20px/1 Arial';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText(this.fragMessage, 400, 120);\r\n        }\r\n    }\r\n\r\n    textONCanvas(context, text, x, y, font, style, align?, baseline?) {\r\n        context.font = typeof font === 'undefined' ? 'normal 16px/1 Arial' : font;\r\n        context.fillStyle = typeof style === 'undefined' ? '#000000' : style;\r\n        context.textAlign = typeof align === 'undefined' ? 'center' : align;\r\n        context.textBaseline = typeof baseline === 'undefined' ? 'middle' : baseline;\r\n        context.fillText(text, x, y)\r\n    }\r\n\r\n    loadMenuScreen(main: any) {\r\n        \r\n        let gameType:string;\r\n\r\n        main.canvas.addEventListener('click', (e:any) => {\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const pos = {\r\n              x: e.clientX - rect.left,\r\n              y: e.clientY - rect.top\r\n            };\r\n            if(deathBtn.contains(pos.x,pos.y)){\r\n                gameType='deathmatch'\r\n            }\r\n            if(teamBtn.contains(pos.x,pos.y)){\r\n                gameType= 'team';\r\n            }\r\n            if(playBtn.contains(pos.x,pos.y)){\r\n                this.startGame(gameType);\r\n            }\r\n        })\r\n\r\n        main.canvas.style.cursor='pointer';\r\n        main.state = 'menuScreen';\r\n        main.control.mouseLeft = false;\r\n        main.ctx.clearRect(0, 0, main.canvas.width, main.canvas.height);\r\n        var hW = main.canvas.width * 0.5;\r\n        var hH = main.canvas.height * 0.5;\r\n        var dark = 'rgba(0,0,0)';\r\n        var medium = 'rgba(0,0,0)';\r\n        var light = 'rgba(0,0,0)';\r\n        this.textONCanvas(main.ctx, 'Arena Shooter 2D', hW, hH - 100, 'normal 36px/1 ' + main.fontFamily, light, );\r\n        this.textONCanvas(main.ctx, 'Use \"WASD\" to move and \"Left Click\" to shoot.', hW, hH - 30, 'normal 15px/1 ' + main.fontFamily, medium);\r\n        this.textONCanvas(main.ctx, 'Use mouse wheel to change weapons.', hW, hH - 10, 'normal 15px/1 ' + main.fontFamily, medium);\r\n        this.textONCanvas(main.ctx, 'P or ESC for pause screen (i for debug, g for godmode, b to cycle camera).', hW, hH + 10, 'normal 15px/1 ' + main.fontFamily, medium);\r\n        // this.textONCanvas(main.ctx, 'Click to Start', hW, hH + 80, 'normal 18px/1 ' + main.fontFamily, dark);\r\n        \r\n        this.textONCanvas(main.ctx, 'L.Corbella © 2018', 9, main.canvas.height - 14, 'normal 12px/1 ' + main.fontFamily, light, 'left');\r\n        \r\n        let deathBtn = new MyBTN(150,350,200,100);\r\n        deathBtn.draw(main.ctx);\r\n        this.textONCanvas(main.ctx, 'DeathMatch', 250, 375, 'normal 15px/1 ' + main.fontFamily, medium);\r\n        \r\n        let teamBtn = new MyBTN(450,350,200,100);\r\n        teamBtn.draw(main.ctx);\r\n        this.textONCanvas(main.ctx, 'Team DeathMatch', 550, 375, 'normal 15px/1 ' + main.fontFamily, medium);\r\n        let playBtn = new MyBTN(300,475,200,100);\r\n        playBtn.draw(main.ctx);\r\n     \r\n        this.textONCanvas(main.ctx, 'Click to start', 400, 525, 'normal 15px/1 ' + main.fontFamily, medium);\r\n    }\r\n\r\n    loadStatsScreen(main: any) {\r\n        main.canvas.style.cursor='pointer';\r\n        main.state = 'statsScreen';\r\n        main.control.mouseLeft = false;\r\n        main.ctx.clearRect(0, 0, main.canvas.width, main.canvas.height);\r\n        var hW = main.canvas.width * 0.5;\r\n        var hH = main.canvas.height * 0.5;\r\n        var dark = 'rgba(0,0,0)';\r\n        var medium = 'rgba(0,0,0)';\r\n        var light = 'rgba(0,0,0)';\r\n        this.textONCanvas(main.ctx, 'Corbe Shooter 2D',hW, hH - 150, 'normal 42px/1 ' + main.fontFamily, light);\r\n        this.textONCanvas(main.ctx, 'Partita completata!', hW, hH - 70, 'normal 22px/1 ' + main.fontFamily, dark);\r\n        // this.textONCanvas(main.ctx, `${main.player.name} - ${main.player.kills} - ${main.player.numberOfDeaths}`, hW, hH - 30, 'normal 16px/1 ' + main.fontFamily, medium);\r\n        // for (let i = 0; i < this.enemy.list.length; i++) {\r\n        //     const bot = this.enemy.list[i];\r\n        //     this.textONCanvas(main.ctx, `${bot.name} - ${bot.kills} - ${bot.numberOfDeaths}`, hW, hH - 30 +(20*(i+1)), 'normal 16px/1 ' + main.fontFamily, medium);\r\n        // }\r\n        this.actors = this.actors.sort((obj1, obj2) =>obj2.kills - obj1.kills);\r\n        for (let i = 0; i < this.actors.length; i++) {\r\n            const actor = this.actors[i];\r\n            this.textONCanvas(main.ctx, `${actor.name} - ${actor.kills} - ${actor.numberOfDeaths}`, hW, hH - 30 +(20*(i+1)), 'normal 16px/1 ' + main.fontFamily, medium);\r\n        }\r\n        this.textONCanvas(main.ctx, 'Click to Restart', hW, main.canvas.height - 120, 'normal 18px/1 ' + main.fontFamily, dark);\r\n        this.textONCanvas(main.ctx, 'L.Corbella © 2018', 9, main.canvas.height - 14, 'normal 12px/1 ' + main.fontFamily, light, 'left')\r\n    }\r\n    \r\n    // screen di pausa\r\n    loadPauseScreen(main: any) {\r\n        main.canvas.style.cursor='pointer';\r\n        main.paused = true;\r\n        main.control.mouseDown = false;\r\n        main.ctx.fillStyle = 'rgba(255,255,255,0.5)';\r\n        main.ctx.fillRect(0, 0, main.canvas.width, main.canvas.height);\r\n        var hW = main.canvas.width * 0.5;\r\n        var hH = main.canvas.height * 0.5;\r\n        var dark = 'rgba(0,0,0,0.9)';\r\n        var medium = 'rgba(0,0,0,0.5)';\r\n        var light = 'rgba(0,0,0,0.3)';\r\n        this.textONCanvas(main.ctx, 'Paused', hW, hH - 60, 'normal 22px/1 ' + main.fontFamily, dark);\r\n        // this.textONCanvas(main.ctx, `${main.player.name} - ${main.player.kills} - ${main.player.numberOfDeaths}`, hW, hH - 30, 'normal 16px/1 ' + main.fontFamily, medium);\r\n        // for (let i = 0; i < this.enemy.list.length; i++) {\r\n        //     const bot = this.enemy.list[i];\r\n        //     this.textONCanvas(main.ctx, `${bot.name} - ${bot.kills} - ${bot.numberOfDeaths}`, hW, hH - 30 +(20*(i+1)), 'normal 16px/1 ' + main.fontFamily, medium);\r\n        // }\r\n        this.actors = this.actors.sort((obj1, obj2) =>obj2.kills - obj1.kills);\r\n        for (let i = 0; i < this.actors.length; i++) {\r\n            const actor = this.actors[i];\r\n            this.textONCanvas(main.ctx, `${actor.name} - ${actor.kills} - ${actor.numberOfDeaths}`, hW, hH - 30 +(20*(i+1)), 'normal 16px/1 ' + main.fontFamily, medium);\r\n        }\r\n        this.textONCanvas(main.ctx, 'Click to Continue', hW, hH + 150   , 'normal 17px/1 ' + main.fontFamily, dark)\r\n    }\r\n}\r\n\r\nexport class MyBTN  {\r\n\r\n    x:      number;\r\n    y:      number;\r\n    width:  number;\r\n    height: number;\r\n\r\n\r\n    constructor(x:number, y:number, w:number, h:number){\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = w;\r\n        this.height = h;\r\n    }\r\n\r\n    contains(x:number, y:number) {\r\n        return this.x <= x && x <= this.x + this.width &&\r\n               this.y <= y && y <= this.y + this.height;\r\n    }\r\n\r\n    draw(ctx:any) {\r\n        ctx.rect(this.x, this.y, this.width, this.height);\r\n        ctx.stroke();\r\n    }\r\n}"]}